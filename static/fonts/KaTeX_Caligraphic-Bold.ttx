<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="3.3">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name=".null"/>
    <GlyphID id="2" name="nonmarkingreturn"/>
    <GlyphID id="3" name="space"/>
    <GlyphID id="4" name="zero"/>
    <GlyphID id="5" name="one"/>
    <GlyphID id="6" name="two"/>
    <GlyphID id="7" name="three"/>
    <GlyphID id="8" name="four"/>
    <GlyphID id="9" name="five"/>
    <GlyphID id="10" name="six"/>
    <GlyphID id="11" name="seven"/>
    <GlyphID id="12" name="eight"/>
    <GlyphID id="13" name="nine"/>
    <GlyphID id="14" name="A"/>
    <GlyphID id="15" name="B"/>
    <GlyphID id="16" name="C"/>
    <GlyphID id="17" name="D"/>
    <GlyphID id="18" name="E"/>
    <GlyphID id="19" name="F"/>
    <GlyphID id="20" name="G"/>
    <GlyphID id="21" name="H"/>
    <GlyphID id="22" name="I"/>
    <GlyphID id="23" name="J"/>
    <GlyphID id="24" name="K"/>
    <GlyphID id="25" name="L"/>
    <GlyphID id="26" name="M"/>
    <GlyphID id="27" name="N"/>
    <GlyphID id="28" name="O"/>
    <GlyphID id="29" name="P"/>
    <GlyphID id="30" name="Q"/>
    <GlyphID id="31" name="R"/>
    <GlyphID id="32" name="S"/>
    <GlyphID id="33" name="T"/>
    <GlyphID id="34" name="U"/>
    <GlyphID id="35" name="V"/>
    <GlyphID id="36" name="W"/>
    <GlyphID id="37" name="X"/>
    <GlyphID id="38" name="Y"/>
    <GlyphID id="39" name="Z"/>
    <GlyphID id="40" name="uni00A0"/>
    <GlyphID id="41" name="uniEFFD"/>
    <GlyphID id="42" name="uniEFFE"/>
    <GlyphID id="43" name="uniEFFF"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="1.0"/>
    <checkSumAdjustment value="0xeb71ce28"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000000 00011111"/>
    <unitsPerEm value="1000"/>
    <created value="Mon Jun 29 22:52:19 2015"/>
    <modified value="Mon Jun 29 22:52:19 2015"/>
    <xMin value="-27"/>
    <yMin value="-211"/>
    <xMax value="1353"/>
    <yMax value="840"/>
    <macStyle value="00000000 00000001"/>
    <lowestRecPPEM value="8"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="840"/>
    <descent value="-211"/>
    <lineGap value="90"/>
    <advanceWidthMax value="1378"/>
    <minLeftSideBearing value="-27"/>
    <minRightSideBearing value="-303"/>
    <xMaxExtent value="1353"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="44"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="44"/>
    <maxPoints value="115"/>
    <maxContours value="3"/>
    <maxCompositePoints value="0"/>
    <maxCompositeContours value="0"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="30"/>
    <maxStorage value="46"/>
    <maxFunctionDefs value="119"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="132"/>
    <maxSizeOfInstructions value="344"/>
    <maxComponentElements value="0"/>
    <maxComponentDepth value="0"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="2"/>
    <xAvgCharWidth value="702"/>
    <usWeightClass value="700"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000000"/>
    <ySubscriptXSize value="650"/>
    <ySubscriptYSize value="700"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="140"/>
    <ySuperscriptXSize value="650"/>
    <ySuperscriptYSize value="700"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="480"/>
    <yStrikeoutSize value="49"/>
    <yStrikeoutPosition value="258"/>
    <sFamilyClass value="0"/>
    <panose>
      <bFamilyType value="0"/>
      <bSerifStyle value="0"/>
      <bWeight value="8"/>
      <bProportion value="0"/>
      <bContrast value="0"/>
      <bStrokeVariation value="0"/>
      <bArmStyle value="0"/>
      <bLetterForm value="0"/>
      <bMidline value="0"/>
      <bXHeight value="0"/>
    </panose>
    <ulUnicodeRange1 value="10000000 00000000 00000000 11101111"/>
    <ulUnicodeRange2 value="00010000 00000000 11101100 11101101"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="PfEd"/>
    <fsSelection value="00000000 00100000"/>
    <usFirstCharIndex value="32"/>
    <usLastCharIndex value="61439"/>
    <sTypoAscender value="800"/>
    <sTypoDescender value="-200"/>
    <sTypoLineGap value="90"/>
    <usWinAscent value="840"/>
    <usWinDescent value="211"/>
    <ulCodePageRange1 value="00100000 00000000 00000000 10001111"/>
    <ulCodePageRange2 value="01011110 00000011 00000000 00000000"/>
    <sxHeight value="0"/>
    <sCapHeight value="686"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="1"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="250" lsb="50"/>
    <mtx name=".null" width="0" lsb="0"/>
    <mtx name="A" width="921" lsb="39"/>
    <mtx name="B" width="748" lsb="40"/>
    <mtx name="C" width="613" lsb="20"/>
    <mtx name="D" width="892" lsb="20"/>
    <mtx name="E" width="607" lsb="37"/>
    <mtx name="F" width="814" lsb="17"/>
    <mtx name="G" width="682" lsb="50"/>
    <mtx name="H" width="987" lsb="20"/>
    <mtx name="I" width="642" lsb="-27"/>
    <mtx name="J" width="779" lsb="53"/>
    <mtx name="K" width="871" lsb="40"/>
    <mtx name="L" width="788" lsb="41"/>
    <mtx name="M" width="1378" lsb="38"/>
    <mtx name="N" width="937" lsb="-24"/>
    <mtx name="O" width="906" lsb="63"/>
    <mtx name="P" width="810" lsb="20"/>
    <mtx name="Q" width="939" lsb="120"/>
    <mtx name="R" width="990" lsb="20"/>
    <mtx name="S" width="696" lsb="25"/>
    <mtx name="T" width="644" lsb="38"/>
    <mtx name="U" width="715" lsb="-10"/>
    <mtx name="V" width="737" lsb="25"/>
    <mtx name="W" width="1169" lsb="25"/>
    <mtx name="X" width="817" lsb="56"/>
    <mtx name="Y" width="759" lsb="36"/>
    <mtx name="Z" width="818" lsb="46"/>
    <mtx name="eight" width="575" lsb="48"/>
    <mtx name="five" width="575" lsb="57"/>
    <mtx name="four" width="575" lsb="32"/>
    <mtx name="nine" width="575" lsb="48"/>
    <mtx name="nonmarkingreturn" width="333" lsb="0"/>
    <mtx name="one" width="575" lsb="80"/>
    <mtx name="seven" width="575" lsb="64"/>
    <mtx name="six" width="575" lsb="48"/>
    <mtx name="space" width="250" lsb="0"/>
    <mtx name="three" width="575" lsb="48"/>
    <mtx name="two" width="575" lsb="51"/>
    <mtx name="uni00A0" width="250" lsb="0"/>
    <mtx name="uniEFFD" width="500" lsb="0"/>
    <mtx name="uniEFFE" width="300" lsb="0"/>
    <mtx name="uniEFFF" width="100" lsb="0"/>
    <mtx name="zero" width="575" lsb="46"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0x20" name="space"/><!-- SPACE -->
      <map code="0x30" name="zero"/><!-- DIGIT ZERO -->
      <map code="0x31" name="one"/><!-- DIGIT ONE -->
      <map code="0x32" name="two"/><!-- DIGIT TWO -->
      <map code="0x33" name="three"/><!-- DIGIT THREE -->
      <map code="0x34" name="four"/><!-- DIGIT FOUR -->
      <map code="0x35" name="five"/><!-- DIGIT FIVE -->
      <map code="0x36" name="six"/><!-- DIGIT SIX -->
      <map code="0x37" name="seven"/><!-- DIGIT SEVEN -->
      <map code="0x38" name="eight"/><!-- DIGIT EIGHT -->
      <map code="0x39" name="nine"/><!-- DIGIT NINE -->
      <map code="0x41" name="A"/><!-- LATIN CAPITAL LETTER A -->
      <map code="0x42" name="B"/><!-- LATIN CAPITAL LETTER B -->
      <map code="0x43" name="C"/><!-- LATIN CAPITAL LETTER C -->
      <map code="0x44" name="D"/><!-- LATIN CAPITAL LETTER D -->
      <map code="0x45" name="E"/><!-- LATIN CAPITAL LETTER E -->
      <map code="0x46" name="F"/><!-- LATIN CAPITAL LETTER F -->
      <map code="0x47" name="G"/><!-- LATIN CAPITAL LETTER G -->
      <map code="0x48" name="H"/><!-- LATIN CAPITAL LETTER H -->
      <map code="0x49" name="I"/><!-- LATIN CAPITAL LETTER I -->
      <map code="0x4a" name="J"/><!-- LATIN CAPITAL LETTER J -->
      <map code="0x4b" name="K"/><!-- LATIN CAPITAL LETTER K -->
      <map code="0x4c" name="L"/><!-- LATIN CAPITAL LETTER L -->
      <map code="0x4d" name="M"/><!-- LATIN CAPITAL LETTER M -->
      <map code="0x4e" name="N"/><!-- LATIN CAPITAL LETTER N -->
      <map code="0x4f" name="O"/><!-- LATIN CAPITAL LETTER O -->
      <map code="0x50" name="P"/><!-- LATIN CAPITAL LETTER P -->
      <map code="0x51" name="Q"/><!-- LATIN CAPITAL LETTER Q -->
      <map code="0x52" name="R"/><!-- LATIN CAPITAL LETTER R -->
      <map code="0x53" name="S"/><!-- LATIN CAPITAL LETTER S -->
      <map code="0x54" name="T"/><!-- LATIN CAPITAL LETTER T -->
      <map code="0x55" name="U"/><!-- LATIN CAPITAL LETTER U -->
      <map code="0x56" name="V"/><!-- LATIN CAPITAL LETTER V -->
      <map code="0x57" name="W"/><!-- LATIN CAPITAL LETTER W -->
      <map code="0x58" name="X"/><!-- LATIN CAPITAL LETTER X -->
      <map code="0x59" name="Y"/><!-- LATIN CAPITAL LETTER Y -->
      <map code="0x5a" name="Z"/><!-- LATIN CAPITAL LETTER Z -->
      <map code="0xa0" name="uni00A0"/><!-- NO-BREAK SPACE -->
      <map code="0xeffd" name="uniEFFD"/><!-- ???? -->
      <map code="0xeffe" name="uniEFFE"/><!-- ???? -->
      <map code="0xefff" name="uniEFFF"/><!-- ???? -->
    </cmap_format_4>
    <cmap_format_0 platformID="1" platEncID="0" language="0">
      <map code="0x0" name=".null"/>
      <map code="0x1" name=".notdef"/>
      <map code="0x2" name=".notdef"/>
      <map code="0x3" name=".notdef"/>
      <map code="0x4" name=".notdef"/>
      <map code="0x5" name=".notdef"/>
      <map code="0x6" name=".notdef"/>
      <map code="0x7" name=".notdef"/>
      <map code="0x8" name=".null"/>
      <map code="0x9" name="nonmarkingreturn"/>
      <map code="0xa" name=".notdef"/>
      <map code="0xb" name=".notdef"/>
      <map code="0xc" name=".notdef"/>
      <map code="0xd" name="nonmarkingreturn"/>
      <map code="0xe" name=".notdef"/>
      <map code="0xf" name=".notdef"/>
      <map code="0x10" name=".notdef"/>
      <map code="0x11" name=".notdef"/>
      <map code="0x12" name=".notdef"/>
      <map code="0x13" name=".notdef"/>
      <map code="0x14" name=".notdef"/>
      <map code="0x15" name=".notdef"/>
      <map code="0x16" name=".notdef"/>
      <map code="0x17" name=".notdef"/>
      <map code="0x18" name=".notdef"/>
      <map code="0x19" name=".notdef"/>
      <map code="0x1a" name=".notdef"/>
      <map code="0x1b" name=".notdef"/>
      <map code="0x1c" name=".notdef"/>
      <map code="0x1d" name=".null"/>
      <map code="0x1e" name=".notdef"/>
      <map code="0x1f" name=".notdef"/>
      <map code="0x20" name="space"/>
      <map code="0x21" name=".notdef"/>
      <map code="0x22" name=".notdef"/>
      <map code="0x23" name=".notdef"/>
      <map code="0x24" name=".notdef"/>
      <map code="0x25" name=".notdef"/>
      <map code="0x26" name=".notdef"/>
      <map code="0x27" name=".notdef"/>
      <map code="0x28" name=".notdef"/>
      <map code="0x29" name=".notdef"/>
      <map code="0x2a" name=".notdef"/>
      <map code="0x2b" name=".notdef"/>
      <map code="0x2c" name=".notdef"/>
      <map code="0x2d" name=".notdef"/>
      <map code="0x2e" name=".notdef"/>
      <map code="0x2f" name=".notdef"/>
      <map code="0x30" name="zero"/>
      <map code="0x31" name="one"/>
      <map code="0x32" name="two"/>
      <map code="0x33" name="three"/>
      <map code="0x34" name="four"/>
      <map code="0x35" name="five"/>
      <map code="0x36" name="six"/>
      <map code="0x37" name="seven"/>
      <map code="0x38" name="eight"/>
      <map code="0x39" name="nine"/>
      <map code="0x3a" name=".notdef"/>
      <map code="0x3b" name=".notdef"/>
      <map code="0x3c" name=".notdef"/>
      <map code="0x3d" name=".notdef"/>
      <map code="0x3e" name=".notdef"/>
      <map code="0x3f" name=".notdef"/>
      <map code="0x40" name=".notdef"/>
      <map code="0x41" name="A"/>
      <map code="0x42" name="B"/>
      <map code="0x43" name="C"/>
      <map code="0x44" name="D"/>
      <map code="0x45" name="E"/>
      <map code="0x46" name="F"/>
      <map code="0x47" name="G"/>
      <map code="0x48" name="H"/>
      <map code="0x49" name="I"/>
      <map code="0x4a" name="J"/>
      <map code="0x4b" name="K"/>
      <map code="0x4c" name="L"/>
      <map code="0x4d" name="M"/>
      <map code="0x4e" name="N"/>
      <map code="0x4f" name="O"/>
      <map code="0x50" name="P"/>
      <map code="0x51" name="Q"/>
      <map code="0x52" name="R"/>
      <map code="0x53" name="S"/>
      <map code="0x54" name="T"/>
      <map code="0x55" name="U"/>
      <map code="0x56" name="V"/>
      <map code="0x57" name="W"/>
      <map code="0x58" name="X"/>
      <map code="0x59" name="Y"/>
      <map code="0x5a" name="Z"/>
      <map code="0x5b" name=".notdef"/>
      <map code="0x5c" name=".notdef"/>
      <map code="0x5d" name=".notdef"/>
      <map code="0x5e" name=".notdef"/>
      <map code="0x5f" name=".notdef"/>
      <map code="0x60" name=".notdef"/>
      <map code="0x61" name=".notdef"/>
      <map code="0x62" name=".notdef"/>
      <map code="0x63" name=".notdef"/>
      <map code="0x64" name=".notdef"/>
      <map code="0x65" name=".notdef"/>
      <map code="0x66" name=".notdef"/>
      <map code="0x67" name=".notdef"/>
      <map code="0x68" name=".notdef"/>
      <map code="0x69" name=".notdef"/>
      <map code="0x6a" name=".notdef"/>
      <map code="0x6b" name=".notdef"/>
      <map code="0x6c" name=".notdef"/>
      <map code="0x6d" name=".notdef"/>
      <map code="0x6e" name=".notdef"/>
      <map code="0x6f" name=".notdef"/>
      <map code="0x70" name=".notdef"/>
      <map code="0x71" name=".notdef"/>
      <map code="0x72" name=".notdef"/>
      <map code="0x73" name=".notdef"/>
      <map code="0x74" name=".notdef"/>
      <map code="0x75" name=".notdef"/>
      <map code="0x76" name=".notdef"/>
      <map code="0x77" name=".notdef"/>
      <map code="0x78" name=".notdef"/>
      <map code="0x79" name=".notdef"/>
      <map code="0x7a" name=".notdef"/>
      <map code="0x7b" name=".notdef"/>
      <map code="0x7c" name=".notdef"/>
      <map code="0x7d" name=".notdef"/>
      <map code="0x7e" name=".notdef"/>
      <map code="0x7f" name=".notdef"/>
      <map code="0x80" name=".notdef"/>
      <map code="0x81" name=".notdef"/>
      <map code="0x82" name=".notdef"/>
      <map code="0x83" name=".notdef"/>
      <map code="0x84" name=".notdef"/>
      <map code="0x85" name=".notdef"/>
      <map code="0x86" name=".notdef"/>
      <map code="0x87" name=".notdef"/>
      <map code="0x88" name=".notdef"/>
      <map code="0x89" name=".notdef"/>
      <map code="0x8a" name=".notdef"/>
      <map code="0x8b" name=".notdef"/>
      <map code="0x8c" name=".notdef"/>
      <map code="0x8d" name=".notdef"/>
      <map code="0x8e" name=".notdef"/>
      <map code="0x8f" name=".notdef"/>
      <map code="0x90" name=".notdef"/>
      <map code="0x91" name=".notdef"/>
      <map code="0x92" name=".notdef"/>
      <map code="0x93" name=".notdef"/>
      <map code="0x94" name=".notdef"/>
      <map code="0x95" name=".notdef"/>
      <map code="0x96" name=".notdef"/>
      <map code="0x97" name=".notdef"/>
      <map code="0x98" name=".notdef"/>
      <map code="0x99" name=".notdef"/>
      <map code="0x9a" name=".notdef"/>
      <map code="0x9b" name=".notdef"/>
      <map code="0x9c" name=".notdef"/>
      <map code="0x9d" name=".notdef"/>
      <map code="0x9e" name=".notdef"/>
      <map code="0x9f" name=".notdef"/>
      <map code="0xa0" name=".notdef"/>
      <map code="0xa1" name=".notdef"/>
      <map code="0xa2" name=".notdef"/>
      <map code="0xa3" name=".notdef"/>
      <map code="0xa4" name=".notdef"/>
      <map code="0xa5" name=".notdef"/>
      <map code="0xa6" name=".notdef"/>
      <map code="0xa7" name=".notdef"/>
      <map code="0xa8" name=".notdef"/>
      <map code="0xa9" name=".notdef"/>
      <map code="0xaa" name=".notdef"/>
      <map code="0xab" name=".notdef"/>
      <map code="0xac" name=".notdef"/>
      <map code="0xad" name=".notdef"/>
      <map code="0xae" name=".notdef"/>
      <map code="0xaf" name=".notdef"/>
      <map code="0xb0" name=".notdef"/>
      <map code="0xb1" name=".notdef"/>
      <map code="0xb2" name=".notdef"/>
      <map code="0xb3" name=".notdef"/>
      <map code="0xb4" name=".notdef"/>
      <map code="0xb5" name=".notdef"/>
      <map code="0xb6" name=".notdef"/>
      <map code="0xb7" name=".notdef"/>
      <map code="0xb8" name=".notdef"/>
      <map code="0xb9" name=".notdef"/>
      <map code="0xba" name=".notdef"/>
      <map code="0xbb" name=".notdef"/>
      <map code="0xbc" name=".notdef"/>
      <map code="0xbd" name=".notdef"/>
      <map code="0xbe" name=".notdef"/>
      <map code="0xbf" name=".notdef"/>
      <map code="0xc0" name=".notdef"/>
      <map code="0xc1" name=".notdef"/>
      <map code="0xc2" name=".notdef"/>
      <map code="0xc3" name=".notdef"/>
      <map code="0xc4" name=".notdef"/>
      <map code="0xc5" name=".notdef"/>
      <map code="0xc6" name=".notdef"/>
      <map code="0xc7" name=".notdef"/>
      <map code="0xc8" name=".notdef"/>
      <map code="0xc9" name=".notdef"/>
      <map code="0xca" name="uni00A0"/>
      <map code="0xcb" name=".notdef"/>
      <map code="0xcc" name=".notdef"/>
      <map code="0xcd" name=".notdef"/>
      <map code="0xce" name=".notdef"/>
      <map code="0xcf" name=".notdef"/>
      <map code="0xd0" name=".notdef"/>
      <map code="0xd1" name=".notdef"/>
      <map code="0xd2" name=".notdef"/>
      <map code="0xd3" name=".notdef"/>
      <map code="0xd4" name=".notdef"/>
      <map code="0xd5" name=".notdef"/>
      <map code="0xd6" name=".notdef"/>
      <map code="0xd7" name=".notdef"/>
      <map code="0xd8" name=".notdef"/>
      <map code="0xd9" name=".notdef"/>
      <map code="0xda" name=".notdef"/>
      <map code="0xdb" name=".notdef"/>
      <map code="0xdc" name=".notdef"/>
      <map code="0xdd" name=".notdef"/>
      <map code="0xde" name=".notdef"/>
      <map code="0xdf" name=".notdef"/>
      <map code="0xe0" name=".notdef"/>
      <map code="0xe1" name=".notdef"/>
      <map code="0xe2" name=".notdef"/>
      <map code="0xe3" name=".notdef"/>
      <map code="0xe4" name=".notdef"/>
      <map code="0xe5" name=".notdef"/>
      <map code="0xe6" name=".notdef"/>
      <map code="0xe7" name=".notdef"/>
      <map code="0xe8" name=".notdef"/>
      <map code="0xe9" name=".notdef"/>
      <map code="0xea" name=".notdef"/>
      <map code="0xeb" name=".notdef"/>
      <map code="0xec" name=".notdef"/>
      <map code="0xed" name=".notdef"/>
      <map code="0xee" name=".notdef"/>
      <map code="0xef" name=".notdef"/>
      <map code="0xf0" name=".notdef"/>
      <map code="0xf1" name=".notdef"/>
      <map code="0xf2" name=".notdef"/>
      <map code="0xf3" name=".notdef"/>
      <map code="0xf4" name=".notdef"/>
      <map code="0xf5" name=".notdef"/>
      <map code="0xf6" name=".notdef"/>
      <map code="0xf7" name=".notdef"/>
      <map code="0xf8" name=".notdef"/>
      <map code="0xf9" name=".notdef"/>
      <map code="0xfa" name=".notdef"/>
      <map code="0xfb" name=".notdef"/>
      <map code="0xfc" name=".notdef"/>
      <map code="0xfd" name=".notdef"/>
      <map code="0xfe" name=".notdef"/>
      <map code="0xff" name=".notdef"/>
    </cmap_format_0>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0x20" name="space"/><!-- SPACE -->
      <map code="0x30" name="zero"/><!-- DIGIT ZERO -->
      <map code="0x31" name="one"/><!-- DIGIT ONE -->
      <map code="0x32" name="two"/><!-- DIGIT TWO -->
      <map code="0x33" name="three"/><!-- DIGIT THREE -->
      <map code="0x34" name="four"/><!-- DIGIT FOUR -->
      <map code="0x35" name="five"/><!-- DIGIT FIVE -->
      <map code="0x36" name="six"/><!-- DIGIT SIX -->
      <map code="0x37" name="seven"/><!-- DIGIT SEVEN -->
      <map code="0x38" name="eight"/><!-- DIGIT EIGHT -->
      <map code="0x39" name="nine"/><!-- DIGIT NINE -->
      <map code="0x41" name="A"/><!-- LATIN CAPITAL LETTER A -->
      <map code="0x42" name="B"/><!-- LATIN CAPITAL LETTER B -->
      <map code="0x43" name="C"/><!-- LATIN CAPITAL LETTER C -->
      <map code="0x44" name="D"/><!-- LATIN CAPITAL LETTER D -->
      <map code="0x45" name="E"/><!-- LATIN CAPITAL LETTER E -->
      <map code="0x46" name="F"/><!-- LATIN CAPITAL LETTER F -->
      <map code="0x47" name="G"/><!-- LATIN CAPITAL LETTER G -->
      <map code="0x48" name="H"/><!-- LATIN CAPITAL LETTER H -->
      <map code="0x49" name="I"/><!-- LATIN CAPITAL LETTER I -->
      <map code="0x4a" name="J"/><!-- LATIN CAPITAL LETTER J -->
      <map code="0x4b" name="K"/><!-- LATIN CAPITAL LETTER K -->
      <map code="0x4c" name="L"/><!-- LATIN CAPITAL LETTER L -->
      <map code="0x4d" name="M"/><!-- LATIN CAPITAL LETTER M -->
      <map code="0x4e" name="N"/><!-- LATIN CAPITAL LETTER N -->
      <map code="0x4f" name="O"/><!-- LATIN CAPITAL LETTER O -->
      <map code="0x50" name="P"/><!-- LATIN CAPITAL LETTER P -->
      <map code="0x51" name="Q"/><!-- LATIN CAPITAL LETTER Q -->
      <map code="0x52" name="R"/><!-- LATIN CAPITAL LETTER R -->
      <map code="0x53" name="S"/><!-- LATIN CAPITAL LETTER S -->
      <map code="0x54" name="T"/><!-- LATIN CAPITAL LETTER T -->
      <map code="0x55" name="U"/><!-- LATIN CAPITAL LETTER U -->
      <map code="0x56" name="V"/><!-- LATIN CAPITAL LETTER V -->
      <map code="0x57" name="W"/><!-- LATIN CAPITAL LETTER W -->
      <map code="0x58" name="X"/><!-- LATIN CAPITAL LETTER X -->
      <map code="0x59" name="Y"/><!-- LATIN CAPITAL LETTER Y -->
      <map code="0x5a" name="Z"/><!-- LATIN CAPITAL LETTER Z -->
      <map code="0xa0" name="uni00A0"/><!-- NO-BREAK SPACE -->
      <map code="0xeffd" name="uniEFFD"/><!-- ???? -->
      <map code="0xeffe" name="uniEFFE"/><!-- ???? -->
      <map code="0xefff" name="uniEFFF"/><!-- ???? -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      PUSHB[ ]	/* 1 value pushed */
      0
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      NEQ[ ]	/* NotEqual */
      IF[ ]	/* If */
      RCVT[ ]	/* ReadCVT */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      14
      LTEQ[ ]	/* LessThenOrEqual */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      6
      GTEQ[ ]	/* GreaterThanOrEqual */
      AND[ ]	/* LogicalAnd */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      52
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      40
      EIF[ ]	/* EndIf */
      ADD[ ]	/* Add */
      FLOOR[ ]	/* Floor */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      NEQ[ ]	/* NotEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      SUB[ ]	/* Subtract */
      PUSHW[ ]	/* 2 values pushed */
      2048 2048
      MUL[ ]	/* Multiply */
      MUL[ ]	/* Multiply */
      SWAP[ ]	/* SwapTopStack */
      DIV[ ]	/* Divide */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      0
      RS[ ]	/* ReadStore */
      SWAP[ ]	/* SwapTopStack */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 3 values pushed */
      0 1 0
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      1
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      32
      ADD[ ]	/* Add */
      FLOOR[ ]	/* Floor */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      2
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      ABS[ ]	/* Absolute */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      192
      LT[ ]	/* LessThan */
      PUSHB[ ]	/* 1 value pushed */
      4
      MINDEX[ ]	/* MoveXToTopStack */
      AND[ ]	/* LogicalAnd */
      PUSHB[ ]	/* 3 values pushed */
      40 1 10
      RS[ ]	/* ReadStore */
      RCVT[ ]	/* ReadCVT */
      MUL[ ]	/* Multiply */
      RCVT[ ]	/* ReadCVT */
      GT[ ]	/* GreaterThan */
      OR[ ]	/* LogicalOr */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      ELSE[ ]	/* Else */
      ROLL[ ]	/* RollTopThreeStack */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      80
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      56
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      56
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 2 values pushed */
      1 10
      RS[ ]	/* ReadStore */
      RCVT[ ]	/* ReadCVT */
      MUL[ ]	/* Multiply */
      RCVT[ ]	/* ReadCVT */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      PUSHB[ ]	/* 1 value pushed */
      40
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 2 values pushed */
      1 10
      RS[ ]	/* ReadStore */
      RCVT[ ]	/* ReadCVT */
      MUL[ ]	/* Multiply */
      RCVT[ ]	/* ReadCVT */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      48
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      48
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      192
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      FLOOR[ ]	/* Floor */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      10
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      ADD[ ]	/* Add */
      ELSE[ ]	/* Else */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      32
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      10
      ADD[ ]	/* Add */
      ELSE[ ]	/* Else */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      54
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      54
      ADD[ ]	/* Add */
      ELSE[ ]	/* Else */
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      NEG[ ]	/* Negate */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      3
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      5
      RS[ ]	/* ReadStore */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      5
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      6
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      4
      FDEF[ ]	/* FunctionDefinition */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ABS[ ]	/* Absolute */
      PUSHB[ ]	/* 2 values pushed */
      5 98
      WS[ ]	/* WriteStore */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      6
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 2 values pushed */
      1 10
      RS[ ]	/* ReadStore */
      RCVT[ ]	/* ReadCVT */
      MUL[ ]	/* Multiply */
      PUSHB[ ]	/* 2 values pushed */
      1 10
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      RCVT[ ]	/* ReadCVT */
      MUL[ ]	/* Multiply */
      PUSHB[ ]	/* 1 value pushed */
      3
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      6
      RS[ ]	/* ReadStore */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 2 values pushed */
      48 5
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      MINDEX[ ]	/* MoveXToTopStack */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
      ADD[ ]	/* Add */
      LT[ ]	/* LessThan */
      ELSE[ ]	/* Else */
      SUB[ ]	/* Subtract */
      GT[ ]	/* GreaterThan */
      EIF[ ]	/* EndIf */
      IF[ ]	/* If */
      SWAP[ ]	/* SwapTopStack */
      EIF[ ]	/* EndIf */
      POP[ ]	/* PopTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      EIF[ ]	/* EndIf */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      NEG[ ]	/* Negate */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      5
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      7
      RS[ ]	/* ReadStore */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 3 values pushed */
      0 2 0
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      6
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      7
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      5
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      7
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      11
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      8
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      7 11 0
      RS[ ]	/* ReadStore */
      RCVT[ ]	/* ReadCVT */
      WS[ ]	/* WriteStore */
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 3 values pushed */
      0 1 0
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      9
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      RS[ ]	/* ReadStore */
      SWAP[ ]	/* SwapTopStack */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 3 values pushed */
      0 1 0
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      10
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      ABS[ ]	/* Absolute */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      32
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      48
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      32
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      64
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      NEG[ ]	/* Negate */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      WCVTP[ ]	/* WriteCVTInPixels */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      11
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      ABS[ ]	/* Absolute */
      PUSHB[ ]	/* 1 value pushed */
      36
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      0
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      64
      EIF[ ]	/* EndIf */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      NEG[ ]	/* Negate */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      WCVTP[ ]	/* WriteCVTInPixels */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      12
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 3 values pushed */
      11 10 3
      RCVT[ ]	/* ReadCVT */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      ELSE[ ]	/* Else */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      13
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      2 2
      RCVT[ ]	/* ReadCVT */
      PUSHB[ ]	/* 1 value pushed */
      100
      SUB[ ]	/* Subtract */
      WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      14
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      12
      RS[ ]	/* ReadStore */
      MD[1]	/* MeasureDistance */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      12
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      13
      RS[ ]	/* ReadStore */
      MD[1]	/* MeasureDistance */
      PUSHB[ ]	/* 1 value pushed */
      0
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      13
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      15
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      16
      DIV[ ]	/* Divide */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      DUP[ ]	/* DuplicateTopStack */
      PUSHW[ ]	/* 1 value pushed */
      1024
      MUL[ ]	/* Multiply */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      14
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      14
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      SWAP[ ]	/* SwapTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      16
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      4 100
      WCVTP[ ]	/* WriteCVTInPixels */
      EIF[ ]	/* EndIf */
      DEPTH[ ]	/* GetDepthStack */
      PUSHB[ ]	/* 1 value pushed */
      13
      NEG[ ]	/* Negate */
      SWAP[ ]	/* SwapTopStack */
      JROT[ ]	/* JumpRelativeOnTrue */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      17
      FDEF[ ]	/* FunctionDefinition */
      MPPEM[ ]	/* MeasurePixelPerEm */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      4 100
      WCVTP[ ]	/* WriteCVTInPixels */
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      DEPTH[ ]	/* GetDepthStack */
      PUSHB[ ]	/* 1 value pushed */
      19
      NEG[ ]	/* Negate */
      SWAP[ ]	/* SwapTopStack */
      JROT[ ]	/* JumpRelativeOnTrue */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      18
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      0 15
      RS[ ]	/* ReadStore */
      NEQ[ ]	/* NotEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      15 15
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      1
      SUB[ ]	/* Subtract */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      15
      CALL[ ]	/* CallFunction */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      0
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 2 values pushed */
      12 2
      CINDEX[ ]	/* CopyXToTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 2 values pushed */
      13 2
      CINDEX[ ]	/* CopyXToTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      1
      SZPS[ ]	/* SetZonePointerS */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      1 0
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      WS[ ]	/* WriteStore */
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      14
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      14
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 2 values pushed */
      1 0
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      14
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      12
      RS[ ]	/* ReadStore */
      GC[1]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      13
      RS[ ]	/* ReadStore */
      GC[1]	/* GetCoordOnPVector */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      11
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 2 values pushed */
      0 0
      SZP0[ ]	/* SetZonePointer0 */
      SWAP[ ]	/* SwapTopStack */
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 1 value pushed */
      1
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      0
      MIAP[0]	/* MoveIndirectAbsPt */
      PUSHB[ ]	/* 3 values pushed */
      1 1 1
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      19
      FDEF[ ]	/* FunctionDefinition */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 2 values pushed */
      0 2
      RCVT[ ]	/* ReadCVT */
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      15
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      PUSHB[ ]	/* 1 value pushed */
      11
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      10
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      DUP[ ]	/* DuplicateTopStack */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      1
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 6 values pushed */
      16 16 1 0 14 0
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      ROLL[ ]	/* RollTopThreeStack */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 2 values pushed */
      18 6
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      117
      CALL[ ]	/* CallFunction */
      ELSE[ ]	/* Else */
      CLEAR[ ]	/* ClearStack */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      20
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      0 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      21
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      1 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      22
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      2 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      23
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      3 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      24
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      4 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      25
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      5 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      26
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      6 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      27
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      7 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      28
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      8 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      29
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      9 19
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      41
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 1 value pushed */
      1
      DELTAP1[ ]	/* DeltaExceptionP1 */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      42
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 1 value pushed */
      1
      DELTAP2[ ]	/* DeltaExceptionP2 */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      43
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 1 value pushed */
      1
      DELTAP3[ ]	/* DeltaExceptionP3 */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      30
      FDEF[ ]	/* FunctionDefinition */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 1 value pushed */
      13
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 2
      RCVT[ ]	/* ReadCVT */
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      15
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      DUP[ ]	/* DuplicateTopStack */
      RCVT[ ]	/* ReadCVT */
      PUSHB[ ]	/* 1 value pushed */
      11
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      10
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      WS[ ]	/* WriteStore */
      DUP[ ]	/* DuplicateTopStack */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      1
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 6 values pushed */
      16 16 1 0 14 0
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      ROLL[ ]	/* RollTopThreeStack */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 2 values pushed */
      18 6
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      117
      CALL[ ]	/* CallFunction */
      ELSE[ ]	/* Else */
      CLEAR[ ]	/* ClearStack */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      31
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      0 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      32
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      1 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      33
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      2 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      34
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      3 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      35
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      4 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      36
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      5 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      37
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      6 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      38
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      7 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      39
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      8 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      40
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      9 30
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      44
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      45
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      16
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      RS[ ]	/* ReadStore */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      44
      LOOPCALL[ ]	/* LoopAndCallFunction */
      POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      46
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      45
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      45
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      47
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      GC[1]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      11
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      NEQ[ ]	/* NotEqual */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      GC[1]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      11
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      48
      FDEF[ ]	/* FunctionDefinition */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 2 values pushed */
      0 2
      RCVT[ ]	/* ReadCVT */
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      1
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 1 value pushed */
      47
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      5 1
      SZP2[ ]	/* SetZonePointer2 */
      RCVT[ ]	/* ReadCVT */
      IF[ ]	/* If */
      IUP[0]	/* InterpolateUntPts */
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      CLEAR[ ]	/* ClearStack */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      49
      FDEF[ ]	/* FunctionDefinition */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 1 value pushed */
      13
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 2
      RCVT[ ]	/* ReadCVT */
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      1
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 1 value pushed */
      47
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      5 1
      SZP2[ ]	/* SetZonePointer2 */
      RCVT[ ]	/* ReadCVT */
      IF[ ]	/* If */
      IUP[0]	/* InterpolateUntPts */
      EIF[ ]	/* EndIf */
      ELSE[ ]	/* Else */
      CLEAR[ ]	/* ClearStack */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      50
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      SHC[1]	/* ShiftContourByLastPt */
      PUSHB[ ]	/* 1 value pushed */
      1
      ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      51
      FDEF[ ]	/* FunctionDefinition */
      SVTCA[0]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 1 value pushed */
      1
      RCVT[ ]	/* ReadCVT */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      11
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 5 values pushed */
      0 0 0 0 0
      WCVTP[ ]	/* WriteCVTInPixels */
      MIAP[0]	/* MoveIndirectAbsPt */
      SWAP[ ]	/* SwapTopStack */
      SHPIX[ ]	/* ShiftZoneByPixel */
      PUSHB[ ]	/* 2 values pushed */
      50 1
      SZP2[ ]	/* SetZonePointer2 */
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      52
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      DUP[ ]	/* DuplicateTopStack */
      GC[1]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      11
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      0
      RS[ ]	/* ReadStore */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      53
      FDEF[ ]	/* FunctionDefinition */
      MDAP[0]	/* MoveDirectAbsPt */
      SLOOP[ ]	/* SetLoopVariable */
      ALIGNRP[ ]	/* AlignRelativePt */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      54
      FDEF[ ]	/* FunctionDefinition */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      DUP[ ]	/* DuplicateTopStack */
      GC[1]	/* GetCoordOnPVector */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      11
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      0
      RS[ ]	/* ReadStore */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      1
      RS[ ]	/* ReadStore */
      MUL[ ]	/* Multiply */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      55
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      2 0
      SZPS[ ]	/* SetZonePointerS */
      CINDEX[ ]	/* CopyXToTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      DUP[ ]	/* DuplicateTopStack */
      GC[1]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      0
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      MD[0]	/* MeasureDistance */
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      IF[ ]	/* If */
      DIV[ ]	/* Divide */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      1
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 3 values pushed */
      54 1 1
      SZP2[ ]	/* SetZonePointer2 */
      SZP1[ ]	/* SetZonePointer1 */
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      56
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      9
      RS[ ]	/* ReadStore */
      CALL[ ]	/* CallFunction */
      NEG[ ]	/* Negate */
      ROLL[ ]	/* RollTopThreeStack */
      MDAP[0]	/* MoveDirectAbsPt */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      ROLL[ ]	/* RollTopThreeStack */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      57
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      9
      RS[ ]	/* ReadStore */
      CALL[ ]	/* CallFunction */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      96
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 4 values pushed */
      2 32 3 32
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 4 values pushed */
      2 38 3 26
      EIF[ ]	/* EndIf */
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      8
      RS[ ]	/* ReadStore */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      SWAP[ ]	/* SwapTopStack */
      GC[0]	/* GetCoordOnPVector */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      4
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      2
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      ABS[ ]	/* Absolute */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      RS[ ]	/* ReadStore */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      2
      RS[ ]	/* ReadStore */
      SUB[ ]	/* Subtract */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      3
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      SUB[ ]	/* Subtract */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      MINDEX[ ]	/* MoveXToTopStack */
      SWAP[ ]	/* SwapTopStack */
      GC[0]	/* GetCoordOnPVector */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ELSE[ ]	/* Else */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      8
      RS[ ]	/* ReadStore */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      8
      RS[ ]	/* ReadStore */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      5
      CINDEX[ ]	/* CopyXToTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      5
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      PUSHB[ ]	/* 1 value pushed */
      4
      MINDEX[ ]	/* MoveXToTopStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      ADD[ ]	/* Add */
      ABS[ ]	/* Absolute */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      ADD[ ]	/* Add */
      ABS[ ]	/* Absolute */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      ELSE[ ]	/* Else */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      MINDEX[ ]	/* MoveXToTopStack */
      SWAP[ ]	/* SwapTopStack */
      GC[0]	/* GetCoordOnPVector */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      58
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      5
      MINDEX[ ]	/* MoveXToTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      SWAP[ ]	/* SwapTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      59
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      8
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      60
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      0
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      MDAP[0]	/* MoveDirectAbsPt */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      5
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      6
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      5
      CINDEX[ ]	/* CopyXToTopStack */
      MD[0]	/* MeasureDistance */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      SUB[ ]	/* Subtract */
      PUSHW[ ]	/* 2 values pushed */
      2048 2048
      MUL[ ]	/* Multiply */
      MUL[ ]	/* Multiply */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      IF[ ]	/* If */
      DIV[ ]	/* Divide */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      MUL[ ]	/* Multiply */
      PUSHW[ ]	/* 1 value pushed */
      1024
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      SWAP[ ]	/* SwapTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      ROLL[ ]	/* RollTopThreeStack */
      SHPIX[ ]	/* ShiftZoneByPixel */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      61
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      8
      RS[ ]	/* ReadStore */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      ADD[ ]	/* Add */
      PUSHB[ ]	/* 1 value pushed */
      32
      ADD[ ]	/* Add */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      ROLL[ ]	/* RollTopThreeStack */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      62
      FDEF[ ]	/* FunctionDefinition */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      EIF[ ]	/* EndIf */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      63
      FDEF[ ]	/* FunctionDefinition */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      EIF[ ]	/* EndIf */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      64
      FDEF[ ]	/* FunctionDefinition */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      EIF[ ]	/* EndIf */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      EIF[ ]	/* EndIf */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      65
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      56
      CALL[ ]	/* CallFunction */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      EIF[ ]	/* EndIf */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      66
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      57
      CALL[ ]	/* CallFunction */
      ROLL[ ]	/* RollTopThreeStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      PUSHB[ ]	/* 1 value pushed */
      4
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      ROLL[ ]	/* RollTopThreeStack */
      SHPIX[ ]	/* ShiftZoneByPixel */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[0]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      EIF[ ]	/* EndIf */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      4
      RS[ ]	/* ReadStore */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 1 value pushed */
      46
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      67
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      MINDEX[ ]	/* MoveXToTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      9
      RS[ ]	/* ReadStore */
      CALL[ ]	/* CallFunction */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      SWAP[ ]	/* SwapTopStack */
      SHPIX[ ]	/* ShiftZoneByPixel */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      68
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      8 4
      CINDEX[ ]	/* CopyXToTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      CINDEX[ ]	/* CopyXToTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      4
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      9
      RS[ ]	/* ReadStore */
      CALL[ ]	/* CallFunction */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      96
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      64
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 4 values pushed */
      2 32 3 32
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 4 values pushed */
      2 38 3 26
      EIF[ ]	/* EndIf */
      WS[ ]	/* WriteStore */
      WS[ ]	/* WriteStore */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      GC[1]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      4
      RS[ ]	/* ReadStore */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      ADD[ ]	/* Add */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      DUP[ ]	/* DuplicateTopStack */
      ROLL[ ]	/* RollTopThreeStack */
      ROLL[ ]	/* RollTopThreeStack */
      SUB[ ]	/* Subtract */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      2
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      ABS[ ]	/* Absolute */
      SWAP[ ]	/* SwapTopStack */
      PUSHB[ ]	/* 1 value pushed */
      3
      RS[ ]	/* ReadStore */
      SUB[ ]	/* Subtract */
      ABS[ ]	/* Absolute */
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      2
      RS[ ]	/* ReadStore */
      SUB[ ]	/* Subtract */
      ELSE[ ]	/* Else */
      PUSHB[ ]	/* 1 value pushed */
      3
      RS[ ]	/* ReadStore */
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      3
      CINDEX[ ]	/* CopyXToTopStack */
      PUSHB[ ]	/* 1 value pushed */
      2
      DIV[ ]	/* Divide */
      DUP[ ]	/* DuplicateTopStack */
      PUSHB[ ]	/* 1 value pushed */
      0
      LT[ ]	/* LessThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      ADD[ ]	/* Add */
      EIF[ ]	/* EndIf */
      FLOOR[ ]	/* Floor */
      PUSHB[ ]	/* 1 value pushed */
      1
      MUL[ ]	/* Multiply */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      2
      CINDEX[ ]	/* CopyXToTopStack */
      GC[0]	/* GetCoordOnPVector */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      SWAP[ ]	/* SwapTopStack */
      SHPIX[ ]	/* ShiftZoneByPixel */
      ELSE[ ]	/* Else */
      POP[ ]	/* PopTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      SWAP[ ]	/* SwapTopStack */
      GC[1]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      1
      CALL[ ]	/* CallFunction */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      69
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      56
      CALL[ ]	/* CallFunction */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      70
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      57
      CALL[ ]	/* CallFunction */
      POP[ ]	/* PopTopStack */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      DUP[ ]	/* DuplicateTopStack */
      ALIGNRP[ ]	/* AlignRelativePt */
      PUSHB[ ]	/* 1 value pushed */
      4
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      SWAP[ ]	/* SwapTopStack */
      SHPIX[ ]	/* ShiftZoneByPixel */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      4
      RS[ ]	/* ReadStore */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 1 value pushed */
      46
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      71
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZP2[ ]	/* SetZonePointer2 */
      DUP[ ]	/* DuplicateTopStack */
      GC[1]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      0
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 3 values pushed */
      0 1 1
      SZP2[ ]	/* SetZonePointer2 */
      SZP1[ ]	/* SetZonePointer1 */
      SZP0[ ]	/* SetZonePointer0 */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 1 value pushed */
      52
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      72
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZP2[ ]	/* SetZonePointer2 */
      DUP[ ]	/* DuplicateTopStack */
      GC[1]	/* GetCoordOnPVector */
      PUSHB[ ]	/* 1 value pushed */
      0
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 3 values pushed */
      0 1 1
      SZP2[ ]	/* SetZonePointer2 */
      SZP1[ ]	/* SetZonePointer1 */
      SZP0[ ]	/* SetZonePointer0 */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 1 value pushed */
      52
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      73
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 2 values pushed */
      0 1
      SZP1[ ]	/* SetZonePointer1 */
      SZP0[ ]	/* SetZonePointer0 */
      PUSHB[ ]	/* 1 value pushed */
      53
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      74
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      55
      LOOPCALL[ ]	/* LoopAndCallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      75
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      RCVT[ ]	/* ReadCVT */
      SWAP[ ]	/* SwapTopStack */
      DUP[ ]	/* DuplicateTopStack */
      MDAP[0]	/* MoveDirectAbsPt */
      DUP[ ]	/* DuplicateTopStack */
      GC[0]	/* GetCoordOnPVector */
      ROLL[ ]	/* RollTopThreeStack */
      SWAP[ ]	/* SwapTopStack */
      SUB[ ]	/* Subtract */
      SHPIX[ ]	/* ShiftZoneByPixel */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      76
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      8
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      75
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      77
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 0 68
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      78
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 1 68
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      79
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 0 68
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      80
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 1 68
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      81
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 0 69
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      82
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 1 69
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      83
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 0 69
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      84
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 1 69
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      85
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 0 65
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      86
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 1 65
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      87
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 0 65
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      88
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 1 65
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      89
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 0 67
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      90
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 1 67
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      91
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 0 67
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      92
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 1 67
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      93
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 0 70
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      94
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 1 70
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      95
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 0 70
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      96
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 1 70
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      97
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 0 66
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      98
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      0 1 66
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      99
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 0 66
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      100
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 3 values pushed */
      1 1 66
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      101
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      58
      CALL[ ]	/* CallFunction */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      102
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      58
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      62
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      103
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      58
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      63
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      104
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      0
      SZPS[ ]	/* SetZonePointerS */
      PUSHB[ ]	/* 1 value pushed */
      58
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      64
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      105
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      59
      CALL[ ]	/* CallFunction */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      106
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      59
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      62
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      107
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      59
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      63
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      108
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      59
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      64
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      109
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      60
      CALL[ ]	/* CallFunction */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      110
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      60
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      62
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      111
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      60
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      63
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      112
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      60
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      64
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      113
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      61
      CALL[ ]	/* CallFunction */
      MDAP[0]	/* MoveDirectAbsPt */
      PUSHB[ ]	/* 2 values pushed */
      46 1
      SZP1[ ]	/* SetZonePointer1 */
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      114
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      61
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      62
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      115
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      61
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      63
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      116
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      61
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      64
      CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      PUSHB[ ]	/* 1 value pushed */
      117
      FDEF[ ]	/* FunctionDefinition */
      PUSHB[ ]	/* 4 values pushed */
      9 4 2 3
      RCVT[ ]	/* ReadCVT */
      IF[ ]	/* If */
      POP[ ]	/* PopTopStack */
      ELSE[ ]	/* Else */
      SWAP[ ]	/* SwapTopStack */
      POP[ ]	/* PopTopStack */
      EIF[ ]	/* EndIf */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      8
      NEG[ ]	/* Negate */
      PUSHB[ ]	/* 1 value pushed */
      3
      DEPTH[ ]	/* GetDepthStack */
      LT[ ]	/* LessThan */
      JROT[ ]	/* JumpRelativeOnTrue */
      PUSHB[ ]	/* 2 values pushed */
      5 1
      SZP2[ ]	/* SetZonePointer2 */
      RCVT[ ]	/* ReadCVT */
      IF[ ]	/* If */
      IUP[0]	/* InterpolateUntPts */
      EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      200
      GT[ ]	/* GreaterThan */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      1 1
      INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      1
      PUSHW[ ]	/* 2 values pushed */
      2048 2048
      MUL[ ]	/* Multiply */
      WCVTF[ ]	/* WriteCVTInFUnits */
      PUSHB[ ]	/* 2 values pushed */
      0 6
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 3 values pushed */
      0 1 0
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 6
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 4 values pushed */
      11 4 1 8
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 6
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 4 values pushed */
      17 2 1 8
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 7
      WS[ ]	/* WriteStore */
      PUSHW[ ]	/* 3 values pushed */
      768 1 9
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      0 8
      WS[ ]	/* WriteStore */
      PUSHW[ ]	/* 3 values pushed */
      64 1 9
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHB[ ]	/* 2 values pushed */
      3 0
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 2 values pushed */
      36 1
      GETINFO[ ]	/* GetInfo */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
      PUSHB[ ]	/* 1 value pushed */
      64
      GETINFO[ ]	/* GetInfo */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      3 100
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 2 values pushed */
      38 1
      GETINFO[ ]	/* GetInfo */
      LTEQ[ ]	/* LessThenOrEqual */
      IF[ ]	/* If */
      PUSHW[ ]	/* 3 values pushed */
      2176 1 1088
      GETINFO[ ]	/* GetInfo */
      MUL[ ]	/* Multiply */
      EQ[ ]	/* Equal */
      IF[ ]	/* If */
      PUSHB[ ]	/* 2 values pushed */
      3 0
      WCVTP[ ]	/* WriteCVTInPixels */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 4 values pushed */
      13 4 1 12
      LOOPCALL[ ]	/* LoopAndCallFunction */
      PUSHW[ ]	/* 1 value pushed */
      511
      SCANCTRL[ ]	/* ScanConversionControl */
      PUSHB[ ]	/* 1 value pushed */
      4
      SCANTYPE[ ]	/* ScanType */
      PUSHB[ ]	/* 2 values pushed */
      2 0
      WCVTP[ ]	/* WriteCVTInPixels */
      PUSHB[ ]	/* 2 values pushed */
      5 100
      WCVTP[ ]	/* WriteCVTInPixels */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="0"/>
    <cv index="1" value="0"/>
    <cv index="2" value="0"/>
    <cv index="3" value="0"/>
    <cv index="4" value="0"/>
    <cv index="5" value="0"/>
    <cv index="6" value="0"/>
    <cv index="7" value="0"/>
    <cv index="8" value="0"/>
    <cv index="9" value="144"/>
    <cv index="10" value="144"/>
    <cv index="11" value="101"/>
    <cv index="12" value="101"/>
    <cv index="13" value="703"/>
    <cv index="14" value="-17"/>
    <cv index="15" value="533"/>
    <cv index="16" value="0"/>
    <cv index="17" value="703"/>
    <cv index="18" value="-17"/>
    <cv index="19" value="533"/>
    <cv index="20" value="0"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef" xMin="50" yMin="0" xMax="200" yMax="533">
      <contour>
        <pt x="50" y="0" on="1"/>
        <pt x="50" y="533" on="1"/>
        <pt x="200" y="533" on="1"/>
        <pt x="200" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="100" y="50" on="1"/>
        <pt x="150" y="50" on="1"/>
        <pt x="150" y="483" on="1"/>
        <pt x="100" y="483" on="1"/>
      </contour>
      <instructions><assembly>
          PUSHB[ ]	/* 6 values pushed */
          6 4 1 0 2 48
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name=".null"/><!-- contains no outline data -->

    <TTGlyph name="A" xMin="39" yMin="-49" xMax="989" yMax="751">
      <contour>
        <pt x="142" y="-49" on="1"/>
        <pt x="102" y="-49" on="0"/>
        <pt x="39" y="10" on="0"/>
        <pt x="39" y="55" on="1"/>
        <pt x="39" y="81" on="0"/>
        <pt x="64" y="144" on="0"/>
        <pt x="81" y="161" on="1"/>
        <pt x="94" y="173" on="0"/>
        <pt x="103" y="174" on="1"/>
        <pt x="118" y="174" on="0"/>
        <pt x="123" y="152" on="1"/>
        <pt x="127" y="133" on="0"/>
        <pt x="166" y="105" on="0"/>
        <pt x="190" y="105" on="1"/>
        <pt x="195" y="105" on="0"/>
        <pt x="197" y="106" on="1"/>
        <pt x="240" y="117" on="0"/>
        <pt x="341" y="246" on="1"/>
        <pt x="487" y="431" on="0"/>
        <pt x="606" y="643" on="1"/>
        <pt x="611" y="651" on="1"/>
        <pt x="640" y="651" on="1"/>
        <pt x="640" y="663" on="1"/>
        <pt x="640" y="673" on="0"/>
        <pt x="644" y="682" on="1"/>
        <pt x="654" y="703" on="0"/>
        <pt x="716" y="744" on="0"/>
        <pt x="745" y="750" on="1"/>
        <pt x="747" y="750" on="0"/>
        <pt x="758" y="751" on="0"/>
        <pt x="761" y="751" on="1"/>
        <pt x="770" y="751" on="0"/>
        <pt x="774" y="748" on="1"/>
        <pt x="777" y="747" on="0"/>
        <pt x="782" y="742" on="1"/>
        <pt x="784" y="739" on="0"/>
        <pt x="784" y="711" on="1"/>
        <pt x="784" y="583" on="0"/>
        <pt x="805" y="262" on="0"/>
        <pt x="820" y="191" on="1"/>
        <pt x="837" y="112" on="0"/>
        <pt x="849" y="89" on="1"/>
        <pt x="856" y="76" on="0"/>
        <pt x="865" y="76" on="1"/>
        <pt x="869" y="76" on="0"/>
        <pt x="893" y="88" on="1"/>
        <pt x="937" y="111" on="0"/>
        <pt x="962" y="112" on="1"/>
        <pt x="973" y="112" on="1"/>
        <pt x="989" y="104" on="0"/>
        <pt x="989" y="94" on="1"/>
        <pt x="989" y="68" on="0"/>
        <pt x="944" y="39" on="1"/>
        <pt x="915" y="20" on="0"/>
        <pt x="846" y="-11" on="1"/>
        <pt x="812" y="-25" on="0"/>
        <pt x="779" y="-26" on="1"/>
        <pt x="722" y="-26" on="0"/>
        <pt x="708" y="9" on="1"/>
        <pt x="699" y="25" on="0"/>
        <pt x="675" y="125" on="0"/>
        <pt x="669" y="161" on="1"/>
        <pt x="524" y="161" on="1"/>
        <pt x="379" y="162" on="1"/>
        <pt x="370" y="150" on="0"/>
        <pt x="359" y="136" on="1"/>
        <pt x="266" y="16" on="0"/>
        <pt x="206" y="-25" on="1"/>
        <pt x="168" y="-49" on="0"/>
      </contour>
      <contour>
        <pt x="448" y="253" on="1"/>
        <pt x="466" y="261" on="0"/>
        <pt x="493" y="261" on="1"/>
        <pt x="568" y="261" on="1"/>
        <pt x="658" y="261" on="1"/>
        <pt x="658" y="266" on="1"/>
        <pt x="647" y="359" on="0"/>
        <pt x="643" y="492" on="1"/>
        <pt x="643" y="500" on="0"/>
        <pt x="642" y="536" on="0"/>
        <pt x="641" y="541" on="1"/>
        <pt x="641" y="556" on="1"/>
        <pt x="626" y="530" on="1"/>
        <pt x="544" y="386" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 10 values pushed */
          34 1 3 4 80 1 9 3 2 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          39
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 51 values pushed */
          0 3 4 9 4 3 9 112 6 1 2 8 5 8 2 5 112 0 5 7 8 5 7 110 0
          9 0 8 2 9 8 98 0 1 10 1 0 1 0 95 0 4 4 7 91 0 7 7 14 7
          76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 57 values pushed */
          0 3 4 9 4 3 9 112 0 6 8 2 8 6 2 112 0 2 5 8 2 5 110 0 5
          7 8 5 7 110 0 9 0 8 6 9 8 98 0 1 10 1 0 1 0 95 0 4 4 7
          91 0 7 7 14 7 76
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 27 values pushed */
          1 0 73 70 63 61 57 55 48 46 43 42 31 29 21 20 13 12 9 8 0 68 1 68 11
          6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="B" xMin="40" yMin="-17" xMax="739" yMax="705">
      <contour>
        <pt x="571" y="195" on="1"/>
        <pt x="571" y="264" on="0"/>
        <pt x="466" y="333" on="0"/>
        <pt x="386" y="333" on="1"/>
        <pt x="378" y="333" on="0"/>
        <pt x="336" y="327" on="0"/>
        <pt x="329" y="327" on="1"/>
        <pt x="307" y="327" on="0"/>
        <pt x="307" y="345" on="1"/>
        <pt x="307" y="360" on="0"/>
        <pt x="344" y="398" on="0"/>
        <pt x="372" y="412" on="1"/>
        <pt x="386" y="419" on="0"/>
        <pt x="419" y="430" on="1"/>
        <pt x="546" y="472" on="0"/>
        <pt x="581" y="498" on="1"/>
        <pt x="594" y="508" on="0"/>
        <pt x="594" y="535" on="1"/>
        <pt x="594" y="568" on="0"/>
        <pt x="547" y="604" on="0"/>
        <pt x="469" y="604" on="0"/>
        <pt x="442" y="583" on="1"/>
        <pt x="390" y="546" on="0"/>
        <pt x="293" y="368" on="0"/>
        <pt x="265" y="256" on="1"/>
        <pt x="237" y="148" on="0"/>
        <pt x="186" y="60" on="1"/>
        <pt x="167" y="29" on="0"/>
        <pt x="144" y="13" on="1"/>
        <pt x="105" y="-15" on="0"/>
        <pt x="68" y="-17" on="1"/>
        <pt x="40" y="-17" on="0"/>
        <pt x="40" y="1" on="1"/>
        <pt x="40" y="9" on="0"/>
        <pt x="52" y="29" on="1"/>
        <pt x="98" y="106" on="0"/>
        <pt x="124" y="210" on="1"/>
        <pt x="164" y="380" on="0"/>
        <pt x="187" y="551" on="1"/>
        <pt x="190" y="575" on="1"/>
        <pt x="187" y="575" on="0"/>
        <pt x="165" y="563" on="1"/>
        <pt x="124" y="542" on="0"/>
        <pt x="98" y="542" on="1"/>
        <pt x="75" y="542" on="0"/>
        <pt x="75" y="560" on="1"/>
        <pt x="75" y="588" on="0"/>
        <pt x="123" y="618" on="1"/>
        <pt x="135" y="625" on="0"/>
        <pt x="272" y="693" on="0"/>
        <pt x="281" y="696" on="1"/>
        <pt x="299" y="703" on="0"/>
        <pt x="316" y="703" on="1"/>
        <pt x="339" y="703" on="0"/>
        <pt x="339" y="685" on="1"/>
        <pt x="339" y="682" on="0"/>
        <pt x="328" y="583" on="1"/>
        <pt x="330" y="584" on="0"/>
        <pt x="334" y="588" on="0"/>
        <pt x="341" y="594" on="0"/>
        <pt x="344" y="597" on="1"/>
        <pt x="451" y="688" on="0"/>
        <pt x="576" y="703" on="1"/>
        <pt x="592" y="705" on="0"/>
        <pt x="611" y="705" on="1"/>
        <pt x="651" y="704" on="0"/>
        <pt x="681" y="689" on="1"/>
        <pt x="740" y="659" on="0"/>
        <pt x="739" y="595" on="1"/>
        <pt x="734" y="504" on="0"/>
        <pt x="595" y="427" on="1"/>
        <pt x="584" y="421" on="1"/>
        <pt x="593" y="417" on="1"/>
        <pt x="709" y="376" on="0"/>
        <pt x="715" y="268" on="1"/>
        <pt x="717" y="193" on="0"/>
        <pt x="665" y="130" on="1"/>
        <pt x="645" y="104" on="0"/>
        <pt x="617" y="82" on="1"/>
        <pt x="512" y="-2" on="0"/>
        <pt x="378" y="-16" on="1"/>
        <pt x="370" y="-17" on="0"/>
        <pt x="348" y="-17" on="1"/>
        <pt x="275" y="-17" on="0"/>
        <pt x="225" y="10" on="1"/>
        <pt x="196" y="23" on="0"/>
        <pt x="194" y="30" on="1"/>
        <pt x="193" y="33" on="0"/>
        <pt x="193" y="36" on="1"/>
        <pt x="193" y="51" on="0"/>
        <pt x="214" y="72" on="1"/>
        <pt x="258" y="116" on="0"/>
        <pt x="311" y="119" on="1"/>
        <pt x="322" y="119" on="1"/>
        <pt x="385" y="83" on="0"/>
        <pt x="441" y="83" on="1"/>
        <pt x="571" y="83" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 20 values pushed */
          54 1 2 5 56 39 2 4 2 71 1 0 4 86 32 2 3 9 4 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          39
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 47 values pushed */
          0 2 5 4 5 2 4 112 0 4 0 5 4 0 110 0 9 8 3 8 9 3 112 1 1
          0 0 5 91 6 1 5 5 13 75 0 8 8 3 91 7 1 3 3 14 3 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 53 values pushed */
          0 2 5 4 5 2 4 112 0 4 0 5 4 0 110 0 0 1 5 0 1 110 0 9 8
          3 8 9 3 112 0 1 1 5 91 6 1 5 5 13 75 0 8 8 3 91 7 1 3 3
          14 3 76
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 16 values pushed */
          96 94 93 91 83 81 42 39 43 41 28 34 18 10 6 27
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="C" xMin="20" yMin="-20" xMax="599" yMax="703">
      <contour>
        <pt x="553" y="187" on="1"/>
        <pt x="580" y="187" on="0"/>
        <pt x="580" y="168" on="1"/>
        <pt x="580" y="157" on="0"/>
        <pt x="561" y="134" on="1"/>
        <pt x="520" y="88" on="0"/>
        <pt x="462" y="51" on="1"/>
        <pt x="366" y="-10" on="0"/>
        <pt x="268" y="-19" on="1"/>
        <pt x="261" y="-20" on="0"/>
        <pt x="243" y="-20" on="1"/>
        <pt x="138" y="-20" on="0"/>
        <pt x="20" y="110" on="0"/>
        <pt x="20" y="218" on="1"/>
        <pt x="20" y="248" on="0"/>
        <pt x="23" y="268" on="1"/>
        <pt x="38" y="387" on="0"/>
        <pt x="111" y="490" on="1"/>
        <pt x="252" y="681" on="0"/>
        <pt x="488" y="702" on="1"/>
        <pt x="490" y="702" on="1"/>
        <pt x="491" y="702" on="0"/>
        <pt x="495" y="703" on="0"/>
        <pt x="501" y="703" on="0"/>
        <pt x="514" y="702" on="0"/>
        <pt x="518" y="702" on="1"/>
        <pt x="548" y="702" on="0"/>
        <pt x="563" y="695" on="1"/>
        <pt x="599" y="677" on="0"/>
        <pt x="599" y="631" on="1"/>
        <pt x="599" y="612" on="0"/>
        <pt x="593" y="593" on="1"/>
        <pt x="588" y="574" on="0"/>
        <pt x="552" y="500" on="0"/>
        <pt x="541" y="486" on="1"/>
        <pt x="523" y="463" on="0"/>
        <pt x="457" y="430" on="0"/>
        <pt x="431" y="430" on="1"/>
        <pt x="423" y="430" on="0"/>
        <pt x="419" y="433" on="1"/>
        <pt x="409" y="437" on="0"/>
        <pt x="409" y="450" on="1"/>
        <pt x="410" y="457" on="0"/>
        <pt x="419" y="474" on="1"/>
        <pt x="445" y="521" on="0"/>
        <pt x="452" y="546" on="1"/>
        <pt x="454" y="552" on="0"/>
        <pt x="454" y="567" on="1"/>
        <pt x="454" y="603" on="0"/>
        <pt x="415" y="603" on="1"/>
        <pt x="316" y="603" on="0"/>
        <pt x="254" y="532" on="1"/>
        <pt x="182" y="445" on="0"/>
        <pt x="166" y="323" on="1"/>
        <pt x="164" y="303" on="0"/>
        <pt x="164" y="284" on="1"/>
        <pt x="164" y="177" on="0"/>
        <pt x="229" y="120" on="1"/>
        <pt x="276" y="80" on="0"/>
        <pt x="340" y="80" on="1"/>
        <pt x="401" y="80" on="0"/>
        <pt x="450" y="133" on="1"/>
        <pt x="499" y="183" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 56 values pushed */
          47 41 2 3 4 1 74 0 4 2 3 2 4 3 112 0 3 0 2 3 0 110 0 0 5
          2 0 5 110 0 5 1 2 5 1 110 0 2 2 13 75 0 1 1 14 1 76 40 43 26
          45 55 16 6 6 26
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="D" xMin="20" yMin="0" xMax="885" yMax="686">
      <contour>
        <pt x="107" y="0" on="1"/>
        <pt x="92" y="7" on="0"/>
        <pt x="92" y="18" on="1"/>
        <pt x="92" y="24" on="0"/>
        <pt x="95" y="31" on="1"/>
        <pt x="105" y="52" on="0"/>
        <pt x="161" y="90" on="0"/>
        <pt x="193" y="98" on="1"/>
        <pt x="197" y="100" on="1"/>
        <pt x="206" y="120" on="1"/>
        <pt x="295" y="345" on="0"/>
        <pt x="308" y="565" on="1"/>
        <pt x="309" y="576" on="0"/>
        <pt x="309" y="585" on="1"/>
        <pt x="271" y="585" on="0"/>
        <pt x="188" y="566" on="0"/>
        <pt x="170" y="548" on="0"/>
        <pt x="164" y="528" on="1"/>
        <pt x="160" y="515" on="0"/>
        <pt x="156" y="509" on="1"/>
        <pt x="143" y="489" on="0"/>
        <pt x="85" y="454" on="0"/>
        <pt x="59" y="449" on="1"/>
        <pt x="47" y="447" on="0"/>
        <pt x="43" y="447" on="1"/>
        <pt x="20" y="447" on="0"/>
        <pt x="20" y="465" on="1"/>
        <pt x="20" y="468" on="0"/>
        <pt x="22" y="478" on="1"/>
        <pt x="35" y="522" on="0"/>
        <pt x="76" y="565" on="1"/>
        <pt x="119" y="607" on="0"/>
        <pt x="173" y="632" on="1"/>
        <pt x="262" y="677" on="0"/>
        <pt x="385" y="685" on="1"/>
        <pt x="386" y="685" on="0"/>
        <pt x="454" y="686" on="0"/>
        <pt x="480" y="686" on="1"/>
        <pt x="505" y="686" on="0"/>
        <pt x="576" y="685" on="0"/>
        <pt x="578" y="685" on="1"/>
        <pt x="885" y="667" on="0"/>
        <pt x="885" y="450" on="1"/>
        <pt x="885" y="371" on="0"/>
        <pt x="840" y="290" on="1"/>
        <pt x="785" y="196" on="0"/>
        <pt x="673" y="123" on="1"/>
        <pt x="503" y="13" on="0"/>
        <pt x="286" y="1" on="1"/>
        <pt x="276" y="0" on="0"/>
        <pt x="187" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="741" y="391" on="1"/>
        <pt x="741" y="566" on="0"/>
        <pt x="481" y="584" on="1"/>
        <pt x="476" y="584" on="0"/>
        <pt x="459" y="585" on="0"/>
        <pt x="457" y="585" on="1"/>
        <pt x="449" y="586" on="1"/>
        <pt x="449" y="579" on="1"/>
        <pt x="425" y="346" on="0"/>
        <pt x="328" y="122" on="1"/>
        <pt x="319" y="102" on="0"/>
        <pt x="319" y="100" on="1"/>
        <pt x="324" y="100" on="1"/>
        <pt x="510" y="100" on="0"/>
        <pt x="628" y="175" on="1"/>
        <pt x="704" y="226" on="0"/>
        <pt x="729" y="314" on="1"/>
        <pt x="741" y="359" on="0"/>
      </contour>
      <instructions><assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          24
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 11 values pushed */
          26 11 2 1 0 2 1 3 6 2 74
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 11 values pushed */
          26 11 2 1 5 2 1 3 6 2 74
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          24
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 30 values pushed */
          0 1 0 6 0 1 6 112 0 2 5 1 0 1 2 0 99 0 6 6 3 91 7 4 2
          3 3 16 3 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          34
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 36 values pushed */
          0 0 2 5 5 0 104 0 1 5 6 5 1 6 112 0 2 0 5 1 2 5 99 0 6
          6 3 91 7 4 2 3 3 16 3 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 40 values pushed */
          0 0 2 5 5 0 104 0 1 5 6 5 1 6 112 0 2 0 5 1 2 5 99 0 6
          6 3 91 0 3 3 16 75 7 1 4 4 16 4 76
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 17 values pushed */
          0 0 64 61 55 52 0 50 0 49 22 136 41 29 8 6 24
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="E" xMin="37" yMin="-16" xMax="627" yMax="703">
      <contour>
        <pt x="216" y="356" on="1"/>
        <pt x="185" y="375" on="0"/>
        <pt x="150" y="420" on="0"/>
        <pt x="150" y="456" on="1"/>
        <pt x="150" y="520" on="0"/>
        <pt x="210" y="582" on="1"/>
        <pt x="255" y="629" on="0"/>
        <pt x="392" y="694" on="0"/>
        <pt x="460" y="701" on="1"/>
        <pt x="466" y="702" on="0"/>
        <pt x="474" y="702" on="1"/>
        <pt x="475" y="703" on="0"/>
        <pt x="499" y="703" on="1"/>
        <pt x="562" y="703" on="0"/>
        <pt x="583" y="694" on="1"/>
        <pt x="607" y="685" on="0"/>
        <pt x="617" y="668" on="1"/>
        <pt x="626" y="656" on="0"/>
        <pt x="627" y="637" on="1"/>
        <pt x="627" y="624" on="0"/>
        <pt x="625" y="616" on="1"/>
        <pt x="616" y="581" on="0"/>
        <pt x="552" y="525" on="0"/>
        <pt x="512" y="518" on="1"/>
        <pt x="506" y="516" on="0"/>
        <pt x="495" y="516" on="1"/>
        <pt x="471" y="516" on="0"/>
        <pt x="471" y="530" on="1"/>
        <pt x="471" y="535" on="0"/>
        <pt x="482" y="566" on="0"/>
        <pt x="482" y="570" on="1"/>
        <pt x="482" y="590" on="0"/>
        <pt x="466" y="596" on="1"/>
        <pt x="440" y="603" on="0"/>
        <pt x="401" y="603" on="1"/>
        <pt x="344" y="603" on="0"/>
        <pt x="319" y="582" on="1"/>
        <pt x="295" y="558" on="0"/>
        <pt x="295" y="519" on="1"/>
        <pt x="295" y="491" on="0"/>
        <pt x="316" y="470" on="1"/>
        <pt x="335" y="450" on="0"/>
        <pt x="413" y="427" on="0"/>
        <pt x="455" y="427" on="1"/>
        <pt x="477" y="427" on="0"/>
        <pt x="477" y="409" on="1"/>
        <pt x="477" y="403" on="0"/>
        <pt x="473" y="395" on="1"/>
        <pt x="464" y="377" on="0"/>
        <pt x="415" y="342" on="0"/>
        <pt x="389" y="333" on="1"/>
        <pt x="374" y="328" on="0"/>
        <pt x="344" y="326" on="1"/>
        <pt x="267" y="322" on="0"/>
        <pt x="223" y="272" on="1"/>
        <pt x="190" y="234" on="0"/>
        <pt x="182" y="189" on="1"/>
        <pt x="181" y="185" on="0"/>
        <pt x="181" y="176" on="1"/>
        <pt x="181" y="131" on="0"/>
        <pt x="267" y="83" on="0"/>
        <pt x="324" y="83" on="1"/>
        <pt x="365" y="83" on="0"/>
        <pt x="418" y="109" on="0"/>
        <pt x="448" y="137" on="1"/>
        <pt x="468" y="157" on="0"/>
        <pt x="487" y="167" on="1"/>
        <pt x="517" y="185" on="0"/>
        <pt x="547" y="187" on="1"/>
        <pt x="574" y="187" on="0"/>
        <pt x="574" y="170" on="1"/>
        <pt x="574" y="154" on="0"/>
        <pt x="545" y="125" on="1"/>
        <pt x="493" y="73" on="0"/>
        <pt x="349" y="-4" on="0"/>
        <pt x="271" y="-15" on="1"/>
        <pt x="260" y="-16" on="0"/>
        <pt x="226" y="-16" on="1"/>
        <pt x="181" y="-16" on="0"/>
        <pt x="152" y="-9" on="1"/>
        <pt x="37" y="22" on="0"/>
        <pt x="37" y="111" on="1"/>
        <pt x="37" y="128" on="0"/>
        <pt x="41" y="144" on="1"/>
        <pt x="67" y="251" on="0"/>
        <pt x="185" y="335" on="1"/>
        <pt x="189" y="338" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 78 values pushed */
          27 1 1 2 45 1 4 3 58 1 5 6 3 74 0 2 0 1 0 2 1 112 0 3 1
          4 1 3 4 112 0 4 6 1 4 6 110 0 6 5 1 6 5 110 0 5 7 1 5 7
          110 0 1 1 0 91 0 0 0 13 75 0 7 7 14 7 76 39 37 39 39 39 39 28 58
          8 6 28
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="F" xMin="17" yMin="-30" xMax="930" yMax="686">
      <contour>
        <pt x="17" y="36" on="1"/>
        <pt x="17" y="61" on="0"/>
        <pt x="99" y="117" on="0"/>
        <pt x="135" y="119" on="1"/>
        <pt x="140" y="119" on="0"/>
        <pt x="146" y="118" on="0"/>
        <pt x="150" y="117" on="0"/>
        <pt x="155" y="114" on="0"/>
        <pt x="157" y="112" on="0"/>
        <pt x="164" y="105" on="0"/>
        <pt x="165" y="104" on="1"/>
        <pt x="192" y="77" on="0"/>
        <pt x="227" y="72" on="1"/>
        <pt x="232" y="72" on="0"/>
        <pt x="234" y="76" on="1"/>
        <pt x="263" y="121" on="0"/>
        <pt x="304" y="212" on="1"/>
        <pt x="387" y="392" on="0"/>
        <pt x="424" y="570" on="1"/>
        <pt x="428" y="586" on="1"/>
        <pt x="276" y="586" on="1"/>
        <pt x="262" y="572" on="0"/>
        <pt x="213" y="551" on="0"/>
        <pt x="190" y="551" on="1"/>
        <pt x="180" y="551" on="0"/>
        <pt x="167" y="561" on="0"/>
        <pt x="167" y="569" on="1"/>
        <pt x="167" y="580" on="0"/>
        <pt x="179" y="598" on="1"/>
        <pt x="196" y="624" on="0"/>
        <pt x="235" y="648" on="1"/>
        <pt x="293" y="682" on="0"/>
        <pt x="371" y="685" on="1"/>
        <pt x="374" y="686" on="0"/>
        <pt x="624" y="686" on="1"/>
        <pt x="876" y="685" on="0"/>
        <pt x="895" y="681" on="1"/>
        <pt x="909" y="679" on="0"/>
        <pt x="930" y="663" on="0"/>
        <pt x="930" y="650" on="1"/>
        <pt x="930" y="647" on="0"/>
        <pt x="928" y="641" on="1"/>
        <pt x="920" y="619" on="0"/>
        <pt x="854" y="573" on="0"/>
        <pt x="823" y="568" on="1"/>
        <pt x="805" y="565" on="0"/>
        <pt x="796" y="570" on="1"/>
        <pt x="786" y="574" on="0"/>
        <pt x="786" y="579" on="1"/>
        <pt x="786" y="586" on="0"/>
        <pt x="690" y="586" on="1"/>
        <pt x="647" y="586" on="1"/>
        <pt x="559" y="586" on="1"/>
        <pt x="558" y="582" on="1"/>
        <pt x="555" y="570" on="1"/>
        <pt x="536" y="491" on="0"/>
        <pt x="498" y="384" on="1"/>
        <pt x="775" y="384" on="1"/>
        <pt x="789" y="378" on="0"/>
        <pt x="790" y="368" on="1"/>
        <pt x="790" y="350" on="0"/>
        <pt x="781" y="334" on="1"/>
        <pt x="765" y="308" on="0"/>
        <pt x="694" y="268" on="0"/>
        <pt x="665" y="268" on="1"/>
        <pt x="647" y="268" on="0"/>
        <pt x="642" y="284" on="1"/>
        <pt x="457" y="284" on="1"/>
        <pt x="447" y="261" on="1"/>
        <pt x="396" y="150" on="0"/>
        <pt x="360" y="94" on="1"/>
        <pt x="329" y="47" on="0"/>
        <pt x="222" y="-23" on="0"/>
        <pt x="170" y="-29" on="1"/>
        <pt x="165" y="-30" on="0"/>
        <pt x="149" y="-30" on="1"/>
        <pt x="127" y="-30" on="0"/>
        <pt x="113" y="-28" on="1"/>
        <pt x="60" y="-17" on="0"/>
        <pt x="26" y="20" on="1"/>
        <pt x="17" y="29" on="0"/>
      </contour>
      <instructions><assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          16
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 14 values pushed */
          39 1 1 3 59 1 6 5 12 1 8 0 3 74
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 14 values pushed */
          39 1 1 3 59 1 7 5 12 1 8 0 3 74
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          16
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 39 values pushed */
          0 2 1 5 1 2 5 112 0 5 7 1 6 0 5 6 99 4 1 1 1 3 91 0 3
          3 13 75 0 0 0 8 91 0 8 8 14 8 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          26
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 45 values pushed */
          0 2 1 5 1 2 5 112 0 6 7 0 7 6 104 0 5 0 7 6 5 7 97 4 1
          1 1 3 91 0 3 3 13 75 0 0 0 8 91 0 8 8 14 8 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          38
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 43 values pushed */
          0 2 1 5 1 2 5 112 0 6 7 0 7 6 104 0 3 4 1 1 2 3 1 99 0
          5 0 7 6 5 7 97 0 0 0 8 91 0 8 8 14 8 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 48 values pushed */
          0 2 1 5 1 2 5 112 0 6 7 0 7 6 104 0 3 4 1 1 2 3 1 99 0
          5 0 7 6 5 7 97 0 0 8 8 0 87 0 0 0 8 91 0 8 0 8 79
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 20 values pushed */
          76 73 67 66 65 63 57 56 52 49 35 31 24 22 20 19 18 9 6 21
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="G" xMin="50" yMin="-113" xMax="671" yMax="703">
      <contour>
        <pt x="527" y="562" on="1"/>
        <pt x="527" y="576" on="0"/>
        <pt x="511" y="594" on="0"/>
        <pt x="477" y="600" on="0"/>
        <pt x="454" y="602" on="0"/>
        <pt x="433" y="602" on="1"/>
        <pt x="351" y="602" on="0"/>
        <pt x="302" y="569" on="1"/>
        <pt x="230" y="521" on="0"/>
        <pt x="203" y="411" on="1"/>
        <pt x="194" y="376" on="0"/>
        <pt x="194" y="344" on="1"/>
        <pt x="194" y="268" on="0"/>
        <pt x="279" y="168" on="0"/>
        <pt x="352" y="168" on="1"/>
        <pt x="386" y="168" on="0"/>
        <pt x="415" y="185" on="1"/>
        <pt x="477" y="222" on="0"/>
        <pt x="505" y="316" on="1"/>
        <pt x="516" y="345" on="0"/>
        <pt x="589" y="391" on="0"/>
        <pt x="622" y="393" on="1"/>
        <pt x="649" y="393" on="0"/>
        <pt x="649" y="376" on="1"/>
        <pt x="649" y="371" on="0"/>
        <pt x="621" y="265" on="0"/>
        <pt x="612" y="237" on="1"/>
        <pt x="580" y="129" on="0"/>
        <pt x="500" y="-5" on="0"/>
        <pt x="442" y="-49" on="1"/>
        <pt x="373" y="-100" on="0"/>
        <pt x="296" y="-112" on="1"/>
        <pt x="285" y="-113" on="0"/>
        <pt x="246" y="-113" on="1"/>
        <pt x="175" y="-113" on="0"/>
        <pt x="109" y="-102" on="1"/>
        <pt x="88" y="-99" on="0"/>
        <pt x="81" y="-96" on="1"/>
        <pt x="71" y="-90" on="0"/>
        <pt x="71" y="-81" on="1"/>
        <pt x="71" y="-66" on="0"/>
        <pt x="89" y="-47" on="1"/>
        <pt x="108" y="-28" on="0"/>
        <pt x="163" y="0" on="0"/>
        <pt x="187" y="2" on="1"/>
        <pt x="199" y="2" on="0"/>
        <pt x="219" y="-2" on="1"/>
        <pt x="276" y="-11" on="0"/>
        <pt x="338" y="-14" on="1"/>
        <pt x="371" y="-14" on="0"/>
        <pt x="377" y="-9" on="1"/>
        <pt x="410" y="24" on="0"/>
        <pt x="446" y="113" on="1"/>
        <pt x="451" y="127" on="1"/>
        <pt x="408" y="101" on="0"/>
        <pt x="299" y="68" on="0"/>
        <pt x="253" y="68" on="1"/>
        <pt x="160" y="68" on="0"/>
        <pt x="50" y="185" on="0"/>
        <pt x="50" y="279" on="1"/>
        <pt x="50" y="306" on="0"/>
        <pt x="53" y="324" on="1"/>
        <pt x="68" y="422" on="0"/>
        <pt x="189" y="586" on="0"/>
        <pt x="287" y="639" on="1"/>
        <pt x="389" y="696" on="0"/>
        <pt x="503" y="702" on="1"/>
        <pt x="514" y="702" on="1"/>
        <pt x="524" y="703" on="0"/>
        <pt x="532" y="703" on="1"/>
        <pt x="618" y="703" on="0"/>
        <pt x="647" y="678" on="1"/>
        <pt x="671" y="658" on="0"/>
        <pt x="671" y="626" on="1"/>
        <pt x="671" y="609" on="0"/>
        <pt x="663" y="588" on="1"/>
        <pt x="643" y="544" on="0"/>
        <pt x="599" y="498" on="1"/>
        <pt x="578" y="476" on="0"/>
        <pt x="519" y="447" on="0"/>
        <pt x="495" y="447" on="1"/>
        <pt x="472" y="447" on="0"/>
        <pt x="472" y="465" on="1"/>
        <pt x="472" y="479" on="0"/>
        <pt x="490" y="498" on="1"/>
        <pt x="519" y="531" on="0"/>
        <pt x="526" y="553" on="1"/>
        <pt x="527" y="556" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 14 values pushed */
          0 1 9 0 23 1 1 2 53 1 6 1 3 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          9
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 42 values pushed */
          0 9 0 2 0 9 104 0 2 1 0 2 1 110 0 1 0 6 4 1 6 99 5 1 4
          0 3 4 3 95 0 0 0 7 91 8 1 7 7 13 0 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          17
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 43 values pushed */
          0 9 0 2 0 9 2 112 0 2 1 0 2 1 110 0 1 0 6 4 1 6 99 5 1
          4 0 3 4 3 95 0 0 0 7 91 8 1 7 7 13 0 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 49 values pushed */
          0 9 0 2 0 9 2 112 0 2 1 0 2 1 110 0 5 4 3 4 5 104 0 1 0
          6 4 1 6 99 0 4 0 3 4 3 95 0 0 0 7 91 8 1 7 7 13 0 76
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 14 values pushed */
          81 79 33 40 38 34 26 42 37 39 36 10 6 29
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="H" xMin="20" yMin="-48" xMax="946" yMax="686">
      <contour>
        <pt x="42" y="447" on="1"/>
        <pt x="20" y="447" on="0"/>
        <pt x="20" y="465" on="1"/>
        <pt x="20" y="474" on="0"/>
        <pt x="34" y="496" on="1"/>
        <pt x="87" y="575" on="0"/>
        <pt x="259" y="677" on="0"/>
        <pt x="367" y="685" on="1"/>
        <pt x="369" y="686" on="0"/>
        <pt x="392" y="686" on="1"/>
        <pt x="437" y="686" on="0"/>
        <pt x="464" y="662" on="1"/>
        <pt x="483" y="642" on="0"/>
        <pt x="484" y="616" on="1"/>
        <pt x="484" y="591" on="0"/>
        <pt x="479" y="552" on="1"/>
        <pt x="472" y="480" on="0"/>
        <pt x="448" y="388" on="1"/>
        <pt x="441" y="360" on="1"/>
        <pt x="441" y="359" on="0"/>
        <pt x="550" y="359" on="1"/>
        <pt x="660" y="359" on="1"/>
        <pt x="663" y="370" on="1"/>
        <pt x="732" y="584" on="0"/>
        <pt x="758" y="624" on="1"/>
        <pt x="771" y="645" on="0"/>
        <pt x="843" y="686" on="0"/>
        <pt x="870" y="686" on="1"/>
        <pt x="894" y="686" on="0"/>
        <pt x="894" y="668" on="1"/>
        <pt x="894" y="664" on="0"/>
        <pt x="883" y="636" on="1"/>
        <pt x="840" y="532" on="0"/>
        <pt x="767" y="298" on="0"/>
        <pt x="752" y="218" on="1"/>
        <pt x="737" y="135" on="0"/>
        <pt x="737" y="93" on="1"/>
        <pt x="737" y="53" on="0"/>
        <pt x="778" y="53" on="1"/>
        <pt x="788" y="53" on="1"/>
        <pt x="803" y="54" on="0"/>
        <pt x="809" y="56" on="0"/>
        <pt x="814" y="63" on="1"/>
        <pt x="831" y="86" on="0"/>
        <pt x="898" y="120" on="0"/>
        <pt x="924" y="120" on="1"/>
        <pt x="946" y="120" on="0"/>
        <pt x="946" y="100" on="1"/>
        <pt x="943" y="65" on="0"/>
        <pt x="885" y="14" on="1"/>
        <pt x="805" y="-44" on="0"/>
        <pt x="684" y="-48" on="1"/>
        <pt x="651" y="-48" on="0"/>
        <pt x="636" y="-40" on="1"/>
        <pt x="613" y="-28" on="0"/>
        <pt x="603" y="-10" on="1"/>
        <pt x="593" y="4" on="0"/>
        <pt x="593" y="29" on="1"/>
        <pt x="593" y="31" on="0"/>
        <pt x="594" y="43" on="0"/>
        <pt x="594" y="46" on="1"/>
        <pt x="601" y="141" on="0"/>
        <pt x="627" y="244" on="1"/>
        <pt x="634" y="269" on="1"/>
        <pt x="632" y="269" on="0"/>
        <pt x="624" y="266" on="1"/>
        <pt x="610" y="261" on="0"/>
        <pt x="590" y="260" on="0"/>
        <pt x="507" y="259" on="1"/>
        <pt x="411" y="259" on="1"/>
        <pt x="399" y="222" on="1"/>
        <pt x="367" y="128" on="0"/>
        <pt x="340" y="64" on="1"/>
        <pt x="327" y="32" on="0"/>
        <pt x="322" y="21" on="1"/>
        <pt x="310" y="4" on="0"/>
        <pt x="294" y="-8" on="1"/>
        <pt x="248" y="-41" on="0"/>
        <pt x="209" y="-41" on="1"/>
        <pt x="188" y="-41" on="0"/>
        <pt x="185" y="-25" on="1"/>
        <pt x="185" y="-19" on="0"/>
        <pt x="201" y="22" on="1"/>
        <pt x="234" y="103" on="0"/>
        <pt x="261" y="184" on="1"/>
        <pt x="284" y="256" on="0"/>
        <pt x="284" y="258" on="1"/>
        <pt x="284" y="259" on="0"/>
        <pt x="227" y="259" on="1"/>
        <pt x="170" y="259" on="1"/>
        <pt x="155" y="268" on="0"/>
        <pt x="155" y="277" on="1"/>
        <pt x="155" y="296" on="0"/>
        <pt x="214" y="345" on="0"/>
        <pt x="250" y="356" on="1"/>
        <pt x="259" y="358" on="0"/>
        <pt x="286" y="359" on="1"/>
        <pt x="312" y="359" on="0"/>
        <pt x="312" y="360" on="1"/>
        <pt x="314" y="372" on="0"/>
        <pt x="318" y="385" on="1"/>
        <pt x="332" y="450" on="0"/>
        <pt x="339" y="526" on="1"/>
        <pt x="339" y="530" on="0"/>
        <pt x="340" y="541" on="0"/>
        <pt x="340" y="543" on="1"/>
        <pt x="340" y="586" on="0"/>
        <pt x="296" y="586" on="1"/>
        <pt x="242" y="586" on="0"/>
        <pt x="188" y="558" on="0"/>
        <pt x="161" y="517" on="1"/>
        <pt x="145" y="490" on="0"/>
        <pt x="72" y="447" on="0"/>
      </contour>
      <instructions><assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          46
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 22 values pushed */
          29 1 11 1 102 1 0 11 63 1 7 2 47 1 4 5 57 1 6 4 5 74
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 22 values pushed */
          29 1 11 1 102 1 0 11 63 1 7 2 47 1 4 5 57 1 8 4 5 74
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          28
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 49 values pushed */
          0 11 1 0 1 11 0 112 12 1 0 2 1 0 2 110 0 5 7 4 7 5 4 112 10
          1 2 9 1 7 5 2 7 100 0 4 8 1 6 4 6 95 3 1 1 1 13 1 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          46
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 52 values pushed */
          3 1 1 11 1 114 0 11 0 11 114 12 1 0 2 0 114 0 5 7 4 7 5 4 112
          10 1 2 9 1 7 5 2 7 100 0 4 6 6 4 87 0 4 4 6 91 8 1 6 4
          6 79
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 59 values pushed */
          3 1 1 11 1 114 0 11 0 11 114 12 1 0 2 0 114 0 5 7 4 7 5 4 112
          0 8 4 6 4 8 6 112 10 1 2 9 1 7 5 2 7 100 0 4 8 6 4 87 0
          4 4 6 91 0 6 4 6 79
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 31 values pushed */
          1 0 108 106 97 95 89 85 79 77 69 66 52 50 46 44 40 37 28 26 21 18 10 7 0
          112 1 112 13 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="I" xMin="-27" yMin="0" xMax="746" yMax="686">
      <contour>
        <pt x="56" y="499" on="1"/>
        <pt x="32" y="499" on="0"/>
        <pt x="32" y="516" on="1"/>
        <pt x="32" y="520" on="0"/>
        <pt x="34" y="528" on="1"/>
        <pt x="41" y="550" on="0"/>
        <pt x="56" y="570" on="1"/>
        <pt x="93" y="619" on="0"/>
        <pt x="165" y="649" on="1"/>
        <pt x="241" y="682" on="0"/>
        <pt x="365" y="685" on="1"/>
        <pt x="366" y="685" on="0"/>
        <pt x="387" y="685" on="0"/>
        <pt x="423" y="686" on="0"/>
        <pt x="467" y="686" on="0"/>
        <pt x="525" y="686" on="0"/>
        <pt x="553" y="686" on="1"/>
        <pt x="732" y="686" on="1"/>
        <pt x="746" y="676" on="0"/>
        <pt x="746" y="668" on="1"/>
        <pt x="746" y="661" on="0"/>
        <pt x="738" y="648" on="1"/>
        <pt x="725" y="628" on="0"/>
        <pt x="671" y="594" on="0"/>
        <pt x="642" y="587" on="1"/>
        <pt x="572" y="586" on="1"/>
        <pt x="503" y="586" on="1"/>
        <pt x="486" y="558" on="0"/>
        <pt x="476" y="530" on="1"/>
        <pt x="455" y="476" on="0"/>
        <pt x="428" y="368" on="1"/>
        <pt x="384" y="191" on="0"/>
        <pt x="318" y="111" on="1"/>
        <pt x="309" y="101" on="1"/>
        <pt x="412" y="100" on="1"/>
        <pt x="514" y="100" on="1"/>
        <pt x="523" y="109" on="1"/>
        <pt x="567" y="150" on="0"/>
        <pt x="618" y="153" on="1"/>
        <pt x="644" y="153" on="0"/>
        <pt x="644" y="135" on="1"/>
        <pt x="644" y="132" on="0"/>
        <pt x="642" y="124" on="1"/>
        <pt x="629" y="86" on="0"/>
        <pt x="533" y="17" on="0"/>
        <pt x="476" y="6" on="1"/>
        <pt x="454" y="2" on="0"/>
        <pt x="411" y="1" on="0"/>
        <pt x="216" y="0" on="1"/>
        <pt x="-11" y="0" on="0"/>
        <pt x="-15" y="2" on="1"/>
        <pt x="-27" y="6" on="0"/>
        <pt x="-27" y="18" on="1"/>
        <pt x="-27" y="34" on="0"/>
        <pt x="-4" y="55" on="1"/>
        <pt x="23" y="82" on="0"/>
        <pt x="59" y="93" on="1"/>
        <pt x="77" y="100" on="0"/>
        <pt x="142" y="100" on="1"/>
        <pt x="198" y="100" on="1"/>
        <pt x="256" y="178" on="0"/>
        <pt x="299" y="369" on="1"/>
        <pt x="337" y="513" on="0"/>
        <pt x="382" y="574" on="1"/>
        <pt x="391" y="586" on="1"/>
        <pt x="348" y="586" on="1"/>
        <pt x="260" y="586" on="0"/>
        <pt x="176" y="576" on="1"/>
        <pt x="167" y="555" on="0"/>
        <pt x="121" y="515" on="0"/>
        <pt x="91" y="506" on="1"/>
        <pt x="73" y="499" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 10 values pushed */
          2 1 0 2 40 1 3 4 2 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          26
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 39 values pushed */
          8 1 0 2 4 2 0 4 112 0 4 3 2 4 3 110 7 1 2 2 1 91 0 1 1
          13 75 6 1 3 3 5 91 0 5 5 16 5 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 37 values pushed */
          8 1 0 2 4 2 0 4 112 0 4 3 2 4 3 110 0 1 7 1 2 0 1 2 99
          6 1 3 3 5 91 0 5 5 16 5 76
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 23 values pushed */
          1 0 66 64 59 57 49 46 39 37 35 33 26 24 17 9 0 71 1 71 9 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="J" xMin="53" yMin="-114" xMax="937" yMax="686">
      <contour>
        <pt x="200" y="127" on="1"/>
        <pt x="200" y="122" on="0"/>
        <pt x="196" y="100" on="0"/>
        <pt x="196" y="96" on="1"/>
        <pt x="196" y="46" on="0"/>
        <pt x="284" y="-13" on="0"/>
        <pt x="345" y="-13" on="1"/>
        <pt x="369" y="-13" on="0"/>
        <pt x="386" y="-7" on="1"/>
        <pt x="436" y="8" on="0"/>
        <pt x="468" y="73" on="1"/>
        <pt x="478" y="93" on="0"/>
        <pt x="518" y="245" on="0"/>
        <pt x="519" y="250" on="1"/>
        <pt x="583" y="479" on="0"/>
        <pt x="675" y="576" on="1"/>
        <pt x="685" y="586" on="1"/>
        <pt x="634" y="586" on="1"/>
        <pt x="574" y="586" on="0"/>
        <pt x="517" y="579" on="0"/>
        <pt x="484" y="564" on="1"/>
        <pt x="429" y="537" on="0"/>
        <pt x="408" y="474" on="1"/>
        <pt x="402" y="457" on="0"/>
        <pt x="395" y="447" on="1"/>
        <pt x="378" y="424" on="0"/>
        <pt x="312" y="390" on="0"/>
        <pt x="286" y="390" on="1"/>
        <pt x="263" y="390" on="0"/>
        <pt x="263" y="407" on="1"/>
        <pt x="263" y="412" on="0"/>
        <pt x="268" y="430" on="1"/>
        <pt x="296" y="510" on="0"/>
        <pt x="367" y="566" on="1"/>
        <pt x="452" y="636" on="0"/>
        <pt x="557" y="667" on="1"/>
        <pt x="605" y="681" on="0"/>
        <pt x="660" y="685" on="1"/>
        <pt x="662" y="686" on="0"/>
        <pt x="793" y="686" on="1"/>
        <pt x="923" y="686" on="1"/>
        <pt x="937" y="676" on="0"/>
        <pt x="937" y="668" on="1"/>
        <pt x="937" y="661" on="0"/>
        <pt x="929" y="648" on="1"/>
        <pt x="917" y="630" on="0"/>
        <pt x="867" y="597" on="0"/>
        <pt x="842" y="589" on="1"/>
        <pt x="828" y="587" on="0"/>
        <pt x="817" y="586" on="1"/>
        <pt x="795" y="585" on="0"/>
        <pt x="788" y="578" on="1"/>
        <pt x="753" y="547" on="0"/>
        <pt x="713" y="454" on="1"/>
        <pt x="674" y="361" on="0"/>
        <pt x="632" y="189" on="1"/>
        <pt x="615" y="126" on="0"/>
        <pt x="597" y="95" on="1"/>
        <pt x="535" y="-12" on="0"/>
        <pt x="413" y="-72" on="1"/>
        <pt x="326" y="-114" on="0"/>
        <pt x="247" y="-114" on="1"/>
        <pt x="191" y="-114" on="0"/>
        <pt x="158" y="-100" on="1"/>
        <pt x="81" y="-71" on="0"/>
        <pt x="60" y="-14" on="1"/>
        <pt x="53" y="6" on="0"/>
        <pt x="53" y="32" on="1"/>
        <pt x="53" y="59" on="0"/>
        <pt x="63" y="87" on="0"/>
        <pt x="79" y="102" on="1"/>
        <pt x="126" y="147" on="0"/>
        <pt x="177" y="147" on="1"/>
        <pt x="200" y="147" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 10 values pushed */
          29 1 2 1 0 1 0 6 2 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          28
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 34 values pushed */
          0 2 1 6 1 2 6 112 0 6 0 1 6 0 110 0 0 0 5 0 5 96 4 1 1
          1 3 89 0 3 3 13 1 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 40 values pushed */
          0 2 1 6 1 2 6 112 0 6 0 1 6 0 110 0 3 4 1 1 2 3 1 99 0
          0 5 5 0 87 0 0 0 5 92 0 5 0 5 80
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 10 values pushed */
          41 42 25 57 40 41 37 7 6 27
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="K" xMin="40" yMin="-17" xMax="834" yMax="703">
      <contour>
        <pt x="98" y="542" on="1"/>
        <pt x="75" y="542" on="0"/>
        <pt x="75" y="560" on="1"/>
        <pt x="75" y="588" on="0"/>
        <pt x="123" y="618" on="1"/>
        <pt x="132" y="624" on="0"/>
        <pt x="266" y="691" on="0"/>
        <pt x="275" y="694" on="1"/>
        <pt x="295" y="703" on="0"/>
        <pt x="315" y="703" on="1"/>
        <pt x="325" y="703" on="0"/>
        <pt x="330" y="700" on="1"/>
        <pt x="337" y="696" on="0"/>
        <pt x="339" y="688" on="0"/>
        <pt x="339" y="670" on="1"/>
        <pt x="339" y="572" on="0"/>
        <pt x="317" y="471" on="1"/>
        <pt x="289" y="335" on="0"/>
        <pt x="222" y="155" on="1"/>
        <pt x="192" y="73" on="0"/>
        <pt x="181" y="53" on="1"/>
        <pt x="170" y="30" on="0"/>
        <pt x="100" y="-15" on="0"/>
        <pt x="68" y="-17" on="1"/>
        <pt x="40" y="-17" on="0"/>
        <pt x="40" y="0" on="1"/>
        <pt x="40" y="7" on="0"/>
        <pt x="47" y="21" on="1"/>
        <pt x="118" y="192" on="0"/>
        <pt x="162" y="366" on="1"/>
        <pt x="189" y="469" on="0"/>
        <pt x="194" y="564" on="1"/>
        <pt x="194" y="578" on="1"/>
        <pt x="168" y="565" on="1"/>
        <pt x="125" y="542" on="0"/>
      </contour>
      <contour>
        <pt x="807" y="163" on="1"/>
        <pt x="834" y="163" on="0"/>
        <pt x="834" y="142" on="1"/>
        <pt x="834" y="135" on="0"/>
        <pt x="831" y="126" on="1"/>
        <pt x="812" y="66" on="0"/>
        <pt x="668" y="-16" on="0"/>
        <pt x="576" y="-16" on="1"/>
        <pt x="550" y="-16" on="0"/>
        <pt x="544" y="-14" on="1"/>
        <pt x="530" y="-9" on="0"/>
        <pt x="508" y="6" on="1"/>
        <pt x="477" y="27" on="0"/>
        <pt x="439" y="81" on="1"/>
        <pt x="396" y="143" on="0"/>
        <pt x="322" y="308" on="0"/>
        <pt x="311" y="369" on="1"/>
        <pt x="309" y="377" on="0"/>
        <pt x="309" y="398" on="1"/>
        <pt x="309" y="417" on="0"/>
        <pt x="311" y="423" on="1"/>
        <pt x="319" y="449" on="0"/>
        <pt x="347" y="482" on="1"/>
        <pt x="419" y="562" on="0"/>
        <pt x="562" y="642" on="1"/>
        <pt x="650" y="692" on="0"/>
        <pt x="710" y="702" on="1"/>
        <pt x="712" y="702" on="0"/>
        <pt x="730" y="703" on="0"/>
        <pt x="735" y="703" on="1"/>
        <pt x="772" y="703" on="0"/>
        <pt x="791" y="690" on="1"/>
        <pt x="819" y="674" on="0"/>
        <pt x="819" y="618" on="0"/>
        <pt x="763" y="577" on="0"/>
        <pt x="733" y="574" on="1"/>
        <pt x="722" y="574" on="1"/>
        <pt x="704" y="584" on="0"/>
        <pt x="704" y="599" on="1"/>
        <pt x="706" y="609" on="0"/>
        <pt x="691" y="615" on="0"/>
        <pt x="672" y="617" on="1"/>
        <pt x="660" y="613" on="1"/>
        <pt x="624" y="601" on="0"/>
        <pt x="509" y="531" on="0"/>
        <pt x="467" y="496" on="1"/>
        <pt x="430" y="465" on="0"/>
        <pt x="423" y="450" on="1"/>
        <pt x="423" y="440" on="1"/>
        <pt x="423" y="410" on="0"/>
        <pt x="441" y="359" on="1"/>
        <pt x="489" y="218" on="0"/>
        <pt x="565" y="122" on="1"/>
        <pt x="589" y="93" on="0"/>
        <pt x="604" y="83" on="1"/>
        <pt x="621" y="70" on="0"/>
        <pt x="640" y="70" on="1"/>
        <pt x="675" y="70" on="0"/>
        <pt x="701" y="82" on="1"/>
        <pt x="715" y="88" on="0"/>
        <pt x="722" y="108" on="1"/>
        <pt x="733" y="142" on="0"/>
        <pt x="783" y="160" on="1"/>
        <pt x="792" y="163" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 86 values pushed */
          73 32 2 6 1 82 1 3 0 37 1 7 3 25 1 2 7 4 74 8 1 0 6 3 6
          0 3 112 9 1 3 7 6 3 7 110 0 6 6 1 91 5 1 1 1 13 75 0 7 7
          2 91 4 1 2 2 14 2 76 36 35 1 0 92 90 71 70 65 61 43 41 35 98 36 98
          24 22 10 8 0 34 1 34 10 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="L" xMin="41" yMin="-17" xMax="751" yMax="703">
      <contour>
        <pt x="63" y="-17" on="1"/>
        <pt x="41" y="-17" on="0"/>
        <pt x="41" y="0" on="1"/>
        <pt x="41" y="7" on="0"/>
        <pt x="45" y="14" on="1"/>
        <pt x="55" y="32" on="0"/>
        <pt x="85" y="54" on="1"/>
        <pt x="99" y="65" on="0"/>
        <pt x="110" y="85" on="1"/>
        <pt x="130" y="121" on="0"/>
        <pt x="153" y="212" on="1"/>
        <pt x="167" y="266" on="0"/>
        <pt x="182" y="315" on="1"/>
        <pt x="230" y="462" on="0"/>
        <pt x="306" y="553" on="1"/>
        <pt x="358" y="616" on="0"/>
        <pt x="502" y="696" on="0"/>
        <pt x="573" y="702" on="1"/>
        <pt x="576" y="702" on="1"/>
        <pt x="579" y="703" on="0"/>
        <pt x="582" y="703" on="1"/>
        <pt x="584" y="703" on="0"/>
        <pt x="595" y="702" on="0"/>
        <pt x="598" y="702" on="1"/>
        <pt x="640" y="702" on="0"/>
        <pt x="689" y="654" on="0"/>
        <pt x="689" y="613" on="1"/>
        <pt x="689" y="588" on="0"/>
        <pt x="683" y="575" on="1"/>
        <pt x="674" y="550" on="0"/>
        <pt x="589" y="496" on="0"/>
        <pt x="552" y="496" on="1"/>
        <pt x="530" y="496" on="0"/>
        <pt x="530" y="512" on="1"/>
        <pt x="530" y="515" on="0"/>
        <pt x="533" y="534" on="0"/>
        <pt x="533" y="538" on="1"/>
        <pt x="533" y="564" on="0"/>
        <pt x="506" y="596" on="0"/>
        <pt x="480" y="596" on="1"/>
        <pt x="473" y="596" on="1"/>
        <pt x="460" y="596" on="0"/>
        <pt x="448" y="584" on="1"/>
        <pt x="434" y="571" on="0"/>
        <pt x="415" y="544" on="1"/>
        <pt x="350" y="447" on="0"/>
        <pt x="310" y="281" on="1"/>
        <pt x="284" y="181" on="0"/>
        <pt x="261" y="136" on="1"/>
        <pt x="255" y="124" on="1"/>
        <pt x="285" y="124" on="1"/>
        <pt x="341" y="123" on="0"/>
        <pt x="465" y="103" on="1"/>
        <pt x="544" y="91" on="0"/>
        <pt x="583" y="90" on="1"/>
        <pt x="596" y="89" on="1"/>
        <pt x="602" y="115" on="0"/>
        <pt x="691" y="173" on="0"/>
        <pt x="729" y="173" on="1"/>
        <pt x="751" y="173" on="0"/>
        <pt x="751" y="157" on="1"/>
        <pt x="751" y="154" on="0"/>
        <pt x="749" y="146" on="1"/>
        <pt x="733" y="89" on="0"/>
        <pt x="594" y="-3" on="0"/>
        <pt x="523" y="-15" on="1"/>
        <pt x="514" y="-16" on="0"/>
        <pt x="479" y="-16" on="1"/>
        <pt x="422" y="-16" on="0"/>
        <pt x="338" y="-3" on="1"/>
        <pt x="218" y="16" on="0"/>
        <pt x="171" y="18" on="1"/>
        <pt x="155" y="18" on="1"/>
        <pt x="142" y="10" on="1"/>
        <pt x="98" y="-17" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 14 values pushed */
          33 1 2 3 60 1 4 6 2 1 0 8 3 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          29
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 54 values pushed */
          0 3 1 2 1 3 2 112 0 2 6 1 2 6 110 0 6 4 1 6 4 110 0 4 5
          1 4 5 110 0 5 8 1 5 8 110 0 1 1 13 75 0 8 8 16 75 7 9 2 0
          0 14 0 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 56 values pushed */
          0 3 1 2 1 3 2 112 0 2 6 1 2 6 110 0 6 4 1 6 4 110 0 4 5
          1 4 5 110 0 5 8 1 5 8 110 0 8 0 1 8 0 110 0 1 1 13 75 7 9
          2 0 0 14 0 76
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 25 values pushed */
          1 0 72 70 68 66 59 57 54 53 51 49 41 38 32 30 24 22 0 74 1 74 10 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="M" xMin="38" yMin="-49" xMax="1353" yMax="703">
      <contour>
        <pt x="38" y="20" on="1"/>
        <pt x="38" y="58" on="0"/>
        <pt x="82" y="139" on="0"/>
        <pt x="104" y="139" on="1"/>
        <pt x="109" y="139" on="0"/>
        <pt x="117" y="132" on="1"/>
        <pt x="140" y="110" on="0"/>
        <pt x="176" y="106" on="1"/>
        <pt x="189" y="105" on="0"/>
        <pt x="199" y="111" on="1"/>
        <pt x="226" y="131" on="0"/>
        <pt x="286" y="281" on="1"/>
        <pt x="350" y="440" on="0"/>
        <pt x="371" y="604" on="1"/>
        <pt x="375" y="630" on="0"/>
        <pt x="376" y="634" on="1"/>
        <pt x="384" y="657" on="0"/>
        <pt x="453" y="703" on="0"/>
        <pt x="487" y="703" on="1"/>
        <pt x="501" y="703" on="0"/>
        <pt x="510" y="694" on="0"/>
        <pt x="514" y="678" on="1"/>
        <pt x="576" y="438" on="0"/>
        <pt x="649" y="272" on="1"/>
        <pt x="682" y="203" on="0"/>
        <pt x="686" y="202" on="1"/>
        <pt x="687" y="201" on="0"/>
        <pt x="791" y="287" on="0"/>
        <pt x="830" y="322" on="1"/>
        <pt x="968" y="448" on="0"/>
        <pt x="1166" y="642" on="1"/>
        <pt x="1224" y="698" on="0"/>
        <pt x="1226" y="699" on="1"/>
        <pt x="1229" y="701" on="0"/>
        <pt x="1237" y="703" on="1"/>
        <pt x="1258" y="703" on="0"/>
        <pt x="1258" y="667" on="1"/>
        <pt x="1258" y="650" on="0"/>
        <pt x="1252" y="631" on="1"/>
        <pt x="1237" y="567" on="0"/>
        <pt x="1209" y="276" on="0"/>
        <pt x="1209" y="202" on="1"/>
        <pt x="1209" y="148" on="0"/>
        <pt x="1216" y="106" on="1"/>
        <pt x="1220" y="77" on="0"/>
        <pt x="1232" y="77" on="1"/>
        <pt x="1234" y="77" on="0"/>
        <pt x="1260" y="89" on="1"/>
        <pt x="1301" y="111" on="0"/>
        <pt x="1326" y="112" on="1"/>
        <pt x="1353" y="112" on="0"/>
        <pt x="1353" y="94" on="1"/>
        <pt x="1353" y="90" on="0"/>
        <pt x="1351" y="82" on="0"/>
        <pt x="1347" y="75" on="0"/>
        <pt x="1344" y="71" on="0"/>
        <pt x="1336" y="62" on="0"/>
        <pt x="1334" y="60" on="1"/>
        <pt x="1314" y="40" on="0"/>
        <pt x="1258" y="12" on="1"/>
        <pt x="1213" y="-11" on="0"/>
        <pt x="1191" y="-17" on="1"/>
        <pt x="1169" y="-24" on="0"/>
        <pt x="1150" y="-24" on="1"/>
        <pt x="1141" y="-24" on="1"/>
        <pt x="1122" y="-24" on="0"/>
        <pt x="1116" y="-22" on="1"/>
        <pt x="1081" y="-8" on="0"/>
        <pt x="1074" y="26" on="1"/>
        <pt x="1064" y="75" on="0"/>
        <pt x="1064" y="134" on="1"/>
        <pt x="1064" y="257" on="0"/>
        <pt x="1086" y="426" on="1"/>
        <pt x="1087" y="430" on="0"/>
        <pt x="1087" y="434" on="1"/>
        <pt x="853" y="211" on="0"/>
        <pt x="783" y="149" on="1"/>
        <pt x="772" y="140" on="0"/>
        <pt x="708" y="88" on="0"/>
        <pt x="694" y="76" on="1"/>
        <pt x="653" y="44" on="0"/>
        <pt x="640" y="35" on="0"/>
        <pt x="631" y="34" on="1"/>
        <pt x="623" y="34" on="0"/>
        <pt x="618" y="36" on="1"/>
        <pt x="612" y="39" on="0"/>
        <pt x="594" y="63" on="1"/>
        <pt x="546" y="125" on="0"/>
        <pt x="514" y="198" on="1"/>
        <pt x="467" y="307" on="0"/>
        <pt x="423" y="449" on="1"/>
        <pt x="418" y="466" on="1"/>
        <pt x="412" y="444" on="1"/>
        <pt x="376" y="310" on="0"/>
        <pt x="306" y="153" on="1"/>
        <pt x="236" y="-7" on="0"/>
        <pt x="169" y="-41" on="1"/>
        <pt x="150" y="-49" on="0"/>
        <pt x="131" y="-49" on="1"/>
        <pt x="103" y="-48" on="0"/>
        <pt x="50" y="-19" on="0"/>
        <pt x="42" y="-2" on="1"/>
        <pt x="38" y="6" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 65 values pushed */
          91 74 2 0 1 51 1 3 4 82 1 5 3 3 74 0 0 1 4 1 0 4 112 0 4
          3 1 4 3 110 0 3 5 1 3 5 110 0 6 5 6 115 2 1 1 1 13 75 0 5
          5 14 5 76 99 97 60 35 25 31 46 18 7 6 26
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="N" xMin="-24" yMin="-49" xMax="1105" yMax="840">
      <contour>
        <pt x="47" y="139" on="1"/>
        <pt x="81" y="105" on="0"/>
        <pt x="122" y="105" on="1"/>
        <pt x="137" y="105" on="0"/>
        <pt x="147" y="117" on="1"/>
        <pt x="164" y="141" on="0"/>
        <pt x="197" y="245" on="1"/>
        <pt x="256" y="424" on="0"/>
        <pt x="274" y="610" on="1"/>
        <pt x="275" y="634" on="0"/>
        <pt x="284" y="647" on="1"/>
        <pt x="299" y="668" on="0"/>
        <pt x="358" y="703" on="0"/>
        <pt x="389" y="703" on="1"/>
        <pt x="396" y="703" on="0"/>
        <pt x="404" y="701" on="0"/>
        <pt x="410" y="695" on="0"/>
        <pt x="412" y="690" on="0"/>
        <pt x="416" y="677" on="0"/>
        <pt x="418" y="673" on="1"/>
        <pt x="476" y="499" on="0"/>
        <pt x="567" y="298" on="1"/>
        <pt x="607" y="211" on="0"/>
        <pt x="633" y="166" on="1"/>
        <pt x="659" y="120" on="0"/>
        <pt x="673" y="103" on="1"/>
        <pt x="674" y="102" on="0"/>
        <pt x="674" y="103" on="0"/>
        <pt x="675" y="106" on="1"/>
        <pt x="732" y="331" on="0"/>
        <pt x="803" y="551" on="1"/>
        <pt x="842" y="674" on="0"/>
        <pt x="875" y="725" on="1"/>
        <pt x="920" y="793" on="0"/>
        <pt x="1000" y="824" on="1"/>
        <pt x="1041" y="840" on="0"/>
        <pt x="1081" y="840" on="1"/>
        <pt x="1105" y="840" on="0"/>
        <pt x="1105" y="803" on="1"/>
        <pt x="1105" y="768" on="0"/>
        <pt x="1069" y="698" on="0"/>
        <pt x="1051" y="689" on="1"/>
        <pt x="1045" y="686" on="0"/>
        <pt x="1032" y="686" on="1"/>
        <pt x="963" y="681" on="0"/>
        <pt x="914" y="640" on="1"/>
        <pt x="903" y="629" on="0"/>
        <pt x="901" y="624" on="1"/>
        <pt x="889" y="596" on="0"/>
        <pt x="855" y="488" on="1"/>
        <pt x="791" y="281" on="0"/>
        <pt x="738" y="72" on="1"/>
        <pt x="726" y="28" on="1"/>
        <pt x="725" y="29" on="1"/>
        <pt x="725" y="30" on="0"/>
        <pt x="724" y="28" on="1"/>
        <pt x="724" y="27" on="0"/>
        <pt x="723" y="25" on="1"/>
        <pt x="716" y="0" on="0"/>
        <pt x="646" y="-48" on="0"/>
        <pt x="611" y="-48" on="1"/>
        <pt x="600" y="-48" on="0"/>
        <pt x="596" y="-45" on="1"/>
        <pt x="590" y="-42" on="0"/>
        <pt x="576" y="-23" on="1"/>
        <pt x="522" y="44" on="0"/>
        <pt x="480" y="124" on="1"/>
        <pt x="417" y="243" on="0"/>
        <pt x="332" y="463" on="1"/>
        <pt x="328" y="473" on="1"/>
        <pt x="325" y="457" on="1"/>
        <pt x="292" y="295" on="0"/>
        <pt x="227" y="124" on="1"/>
        <pt x="168" y="-26" on="0"/>
        <pt x="97" y="-46" on="1"/>
        <pt x="86" y="-49" on="0"/>
        <pt x="72" y="-49" on="1"/>
        <pt x="38" y="-49" on="0"/>
        <pt x="5" y="-28" on="1"/>
        <pt x="-24" y="-8" on="0"/>
        <pt x="-24" y="21" on="1"/>
        <pt x="-24" y="48" on="0"/>
        <pt x="0" y="109" on="0"/>
        <pt x="18" y="127" on="1"/>
        <pt x="30" y="139" on="0"/>
        <pt x="41" y="139" on="1"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 11 values pushed */
          69 8 2 6 3 25 1 4 0 2 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          37
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 29 values pushed */
          0 6 3 0 0 6 104 0 2 0 3 6 2 3 99 0 0 5 1 4 0 4 96 0 1
          1 13 1 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 30 values pushed */
          0 6 3 0 3 6 0 112 0 2 0 3 6 2 3 99 0 0 5 1 4 0 4 96 0
          1 1 13 1 76
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 15 values pushed */
          85 84 77 75 61 59 43 42 37 35 25 33 7 6 22
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="O" xMin="63" yMin="-17" xMax="882" yMax="703">
      <contour>
        <pt x="737" y="405" on="1"/>
        <pt x="737" y="491" on="0"/>
        <pt x="654" y="603" on="0"/>
        <pt x="576" y="603" on="1"/>
        <pt x="556" y="603" on="0"/>
        <pt x="543" y="593" on="1"/>
        <pt x="527" y="583" on="0"/>
        <pt x="510" y="560" on="1"/>
        <pt x="485" y="530" on="0"/>
        <pt x="464" y="485" on="1"/>
        <pt x="453" y="465" on="0"/>
        <pt x="442" y="454" on="1"/>
        <pt x="397" y="412" on="0"/>
        <pt x="346" y="409" on="1"/>
        <pt x="321" y="409" on="0"/>
        <pt x="321" y="428" on="1"/>
        <pt x="321" y="433" on="0"/>
        <pt x="322" y="436" on="1"/>
        <pt x="331" y="466" on="0"/>
        <pt x="362" y="510" on="1"/>
        <pt x="411" y="586" on="0"/>
        <pt x="558" y="687" on="0"/>
        <pt x="635" y="700" on="1"/>
        <pt x="653" y="703" on="0"/>
        <pt x="677" y="703" on="1"/>
        <pt x="707" y="703" on="0"/>
        <pt x="723" y="699" on="1"/>
        <pt x="798" y="683" on="0"/>
        <pt x="882" y="560" on="0"/>
        <pt x="882" y="376" on="0"/>
        <pt x="840" y="292" on="1"/>
        <pt x="803" y="217" on="0"/>
        <pt x="667" y="87" on="0"/>
        <pt x="580" y="43" on="1"/>
        <pt x="462" y="-17" on="0"/>
        <pt x="343" y="-17" on="1"/>
        <pt x="313" y="-17" on="0"/>
        <pt x="295" y="-15" on="1"/>
        <pt x="207" y="-1" on="0"/>
        <pt x="86" y="110" on="0"/>
        <pt x="69" y="195" on="1"/>
        <pt x="63" y="225" on="0"/>
        <pt x="63" y="257" on="1"/>
        <pt x="63" y="311" on="0"/>
        <pt x="79" y="365" on="1"/>
        <pt x="106" y="460" on="0"/>
        <pt x="258" y="629" on="0"/>
        <pt x="363" y="681" on="1"/>
        <pt x="396" y="698" on="0"/>
        <pt x="416" y="701" on="1"/>
        <pt x="422" y="703" on="0"/>
        <pt x="432" y="703" on="1"/>
        <pt x="449" y="703" on="0"/>
        <pt x="453" y="695" on="1"/>
        <pt x="460" y="687" on="0"/>
        <pt x="453" y="673" on="1"/>
        <pt x="440" y="644" on="0"/>
        <pt x="382" y="613" on="1"/>
        <pt x="319" y="583" on="0"/>
        <pt x="276" y="524" on="1"/>
        <pt x="217" y="446" on="0"/>
        <pt x="208" y="346" on="1"/>
        <pt x="208" y="342" on="0"/>
        <pt x="207" y="328" on="0"/>
        <pt x="207" y="324" on="1"/>
        <pt x="207" y="286" on="0"/>
        <pt x="216" y="255" on="1"/>
        <pt x="235" y="178" on="0"/>
        <pt x="353" y="84" on="0"/>
        <pt x="441" y="84" on="1"/>
        <pt x="469" y="84" on="0"/>
        <pt x="495" y="89" on="1"/>
        <pt x="598" y="109" on="0"/>
        <pt x="737" y="283" on="0"/>
        <pt x="737" y="400" on="1"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 52 values pushed */
          15 1 1 0 61 1 5 1 2 74 0 0 2 1 2 0 1 112 0 1 5 2 1 5 110
          4 1 2 2 13 75 0 5 5 3 92 0 3 3 14 3 76 70 68 31 41 41 40 34 6
          6 25
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="P" xMin="20" yMin="-67" xMax="846" yMax="686">
      <contour>
        <pt x="170" y="-67" on="1"/>
        <pt x="147" y="-67" on="0"/>
        <pt x="147" y="-49" on="1"/>
        <pt x="147" y="-44" on="0"/>
        <pt x="163" y="-5" on="1"/>
        <pt x="284" y="274" on="0"/>
        <pt x="307" y="567" on="1"/>
        <pt x="309" y="585" on="0"/>
        <pt x="308" y="585" on="1"/>
        <pt x="270" y="585" on="0"/>
        <pt x="188" y="566" on="0"/>
        <pt x="170" y="548" on="0"/>
        <pt x="164" y="528" on="1"/>
        <pt x="160" y="515" on="0"/>
        <pt x="156" y="509" on="1"/>
        <pt x="143" y="489" on="0"/>
        <pt x="85" y="454" on="0"/>
        <pt x="59" y="449" on="1"/>
        <pt x="47" y="447" on="0"/>
        <pt x="43" y="447" on="1"/>
        <pt x="20" y="447" on="0"/>
        <pt x="20" y="465" on="1"/>
        <pt x="20" y="468" on="0"/>
        <pt x="22" y="478" on="1"/>
        <pt x="35" y="522" on="0"/>
        <pt x="76" y="565" on="1"/>
        <pt x="119" y="607" on="0"/>
        <pt x="173" y="632" on="1"/>
        <pt x="262" y="677" on="0"/>
        <pt x="385" y="685" on="1"/>
        <pt x="425" y="686" on="1"/>
        <pt x="465" y="686" on="0"/>
        <pt x="495" y="686" on="1"/>
        <pt x="614" y="686" on="0"/>
        <pt x="731" y="669" on="0"/>
        <pt x="784" y="637" on="1"/>
        <pt x="846" y="598" on="0"/>
        <pt x="846" y="533" on="1"/>
        <pt x="846" y="509" on="0"/>
        <pt x="838" y="482" on="1"/>
        <pt x="812" y="390" on="0"/>
        <pt x="614" y="247" on="0"/>
        <pt x="498" y="221" on="1"/>
        <pt x="430" y="206" on="0"/>
        <pt x="378" y="206" on="1"/>
        <pt x="366" y="206" on="1"/>
        <pt x="358" y="181" on="1"/>
        <pt x="341" y="130" on="0"/>
        <pt x="290" y="5" on="0"/>
        <pt x="282" y="-7" on="1"/>
        <pt x="265" y="-29" on="0"/>
        <pt x="197" y="-67" on="0"/>
      </contour>
      <contour>
        <pt x="638" y="554" on="1"/>
        <pt x="574" y="586" on="0"/>
        <pt x="461" y="586" on="1"/>
        <pt x="448" y="586" on="1"/>
        <pt x="448" y="582" on="1"/>
        <pt x="448" y="581" on="0"/>
        <pt x="446" y="573" on="0"/>
        <pt x="445" y="561" on="0"/>
        <pt x="444" y="556" on="1"/>
        <pt x="431" y="437" on="0"/>
        <pt x="395" y="301" on="1"/>
        <pt x="389" y="280" on="1"/>
        <pt x="401" y="286" on="1"/>
        <pt x="433" y="304" on="0"/>
        <pt x="469" y="306" on="1"/>
        <pt x="597" y="314" on="0"/>
        <pt x="651" y="359" on="1"/>
        <pt x="687" y="390" on="0"/>
        <pt x="700" y="445" on="1"/>
        <pt x="701" y="451" on="0"/>
        <pt x="701" y="468" on="1"/>
        <pt x="701" y="483" on="0"/>
        <pt x="699" y="490" on="1"/>
        <pt x="685" y="532" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 18 values pushed */
          21 1 2 1 70 1 6 2 63 1 4 6 2 1 0 4 4 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          23
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 39 values pushed */
          0 2 1 6 1 2 6 112 0 6 4 1 6 4 110 0 4 0 1 4 0 110 7 1 0
          0 113 5 1 1 1 3 91 0 3 3 13 1 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 44 values pushed */
          0 2 1 6 1 2 6 112 0 6 4 1 6 4 110 0 4 0 1 4 0 110 7 1 0
          0 113 0 3 1 1 3 87 0 3 3 1 91 5 1 1 3 1 79
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 21 values pushed */
          1 0 67 65 55 53 45 43 33 28 20 18 9 7 0 51 1 51 8 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="Q" xMin="120" yMin="-146" xMax="905" yMax="703">
      <contour>
        <pt x="568" y="222" on="1"/>
        <pt x="594" y="222" on="0"/>
        <pt x="594" y="204" on="1"/>
        <pt x="594" y="188" on="0"/>
        <pt x="571" y="166" on="1"/>
        <pt x="541" y="138" on="0"/>
        <pt x="461" y="114" on="0"/>
        <pt x="393" y="107" on="1"/>
        <pt x="345" y="103" on="0"/>
        <pt x="316" y="103" on="1"/>
        <pt x="295" y="103" on="0"/>
        <pt x="279" y="105" on="1"/>
        <pt x="209" y="118" on="0"/>
        <pt x="120" y="215" on="0"/>
        <pt x="120" y="290" on="1"/>
        <pt x="120" y="343" on="0"/>
        <pt x="145" y="402" on="1"/>
        <pt x="196" y="525" on="0"/>
        <pt x="332" y="612" on="1"/>
        <pt x="438" y="680" on="0"/>
        <pt x="548" y="697" on="1"/>
        <pt x="574" y="703" on="0"/>
        <pt x="601" y="703" on="1"/>
        <pt x="604" y="703" on="0"/>
        <pt x="619" y="702" on="0"/>
        <pt x="623" y="702" on="1"/>
        <pt x="663" y="702" on="0"/>
        <pt x="687" y="696" on="1"/>
        <pt x="771" y="676" on="0"/>
        <pt x="874" y="548" on="0"/>
        <pt x="874" y="453" on="1"/>
        <pt x="874" y="372" on="0"/>
        <pt x="837" y="298" on="1"/>
        <pt x="792" y="209" on="0"/>
        <pt x="699" y="132" on="1"/>
        <pt x="608" y="59" on="0"/>
        <pt x="483" y="7" on="1"/>
        <pt x="486" y="4" on="0"/>
        <pt x="558" y="-17" on="1"/>
        <pt x="660" y="-46" on="0"/>
        <pt x="726" y="-46" on="1"/>
        <pt x="752" y="-46" on="0"/>
        <pt x="757" y="-38" on="1"/>
        <pt x="760" y="-35" on="0"/>
        <pt x="762" y="-27" on="1"/>
        <pt x="770" y="-1" on="0"/>
        <pt x="843" y="48" on="0"/>
        <pt x="878" y="50" on="1"/>
        <pt x="890" y="50" on="1"/>
        <pt x="905" y="42" on="0"/>
        <pt x="905" y="33" on="1"/>
        <pt x="905" y="27" on="0"/>
        <pt x="904" y="24" on="1"/>
        <pt x="883" y="-54" on="0"/>
        <pt x="777" y="-109" on="1"/>
        <pt x="729" y="-135" on="0"/>
        <pt x="670" y="-145" on="1"/>
        <pt x="662" y="-146" on="0"/>
        <pt x="628" y="-146" on="1"/>
        <pt x="593" y="-146" on="0"/>
        <pt x="583" y="-145" on="1"/>
        <pt x="509" y="-137" on="0"/>
        <pt x="385" y="-98" on="1"/>
        <pt x="296" y="-70" on="0"/>
        <pt x="249" y="-61" on="1"/>
        <pt x="205" y="-51" on="0"/>
        <pt x="164" y="-50" on="1"/>
        <pt x="131" y="-50" on="0"/>
        <pt x="131" y="-33" on="1"/>
        <pt x="131" y="-27" on="0"/>
        <pt x="135" y="-19" on="1"/>
        <pt x="144" y="0" on="0"/>
        <pt x="198" y="39" on="0"/>
        <pt x="227" y="47" on="1"/>
        <pt x="235" y="49" on="0"/>
        <pt x="265" y="50" on="1"/>
        <pt x="520" y="61" on="0"/>
        <pt x="641" y="180" on="1"/>
        <pt x="720" y="261" on="0"/>
        <pt x="729" y="367" on="1"/>
        <pt x="730" y="374" on="0"/>
        <pt x="730" y="387" on="1"/>
        <pt x="730" y="482" on="0"/>
        <pt x="614" y="602" on="0"/>
        <pt x="520" y="602" on="1"/>
        <pt x="459" y="602" on="0"/>
        <pt x="405" y="576" on="1"/>
        <pt x="352" y="549" on="0"/>
        <pt x="276" y="445" on="0"/>
        <pt x="266" y="385" on="1"/>
        <pt x="264" y="369" on="0"/>
        <pt x="264" y="355" on="1"/>
        <pt x="264" y="287" on="0"/>
        <pt x="345" y="208" on="0"/>
        <pt x="413" y="203" on="1"/>
        <pt x="420" y="203" on="1"/>
        <pt x="473" y="203" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 12 values pushed */
          79 1 0 8 68 50 36 3 3 4 2 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          13
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 53 values pushed */
          9 1 0 8 1 8 0 1 112 0 1 4 8 1 4 110 7 1 4 3 8 4 3 110 0
          3 6 8 3 6 110 0 6 5 8 6 5 110 0 5 5 113 0 8 8 2 91 0 2 2
          13 8 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          39
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 59 values pushed */
          0 0 8 9 8 0 9 112 0 9 1 8 9 1 110 0 1 4 8 1 4 110 7 1 4
          3 8 4 3 110 0 3 6 8 3 6 110 0 6 5 8 6 5 110 0 5 5 113 0 8
          8 2 91 0 2 2 13 8 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 65 values pushed */
          0 0 8 9 8 0 9 112 0 9 1 8 9 1 110 0 1 7 8 1 7 110 0 7 4
          8 7 4 110 0 4 3 8 4 3 110 0 3 6 8 3 6 110 0 6 5 8 6 5 110
          0 5 5 113 0 8 8 2 91 0 2 2 13 8 76
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 14 values pushed */
          96 94 39 39 38 41 37 45 91 39 16 10 6 29
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="R" xMin="20" yMin="-17" xMax="981" yMax="686">
      <contour>
        <pt x="187" y="-17" on="1"/>
        <pt x="159" y="-17" on="0"/>
        <pt x="159" y="0" on="1"/>
        <pt x="159" y="6" on="0"/>
        <pt x="170" y="31" on="1"/>
        <pt x="290" y="298" on="0"/>
        <pt x="309" y="575" on="1"/>
        <pt x="309" y="585" on="1"/>
        <pt x="304" y="585" on="1"/>
        <pt x="303" y="585" on="0"/>
        <pt x="287" y="584" on="0"/>
        <pt x="282" y="584" on="1"/>
        <pt x="198" y="576" on="0"/>
        <pt x="179" y="557" on="1"/>
        <pt x="170" y="548" on="0"/>
        <pt x="164" y="528" on="1"/>
        <pt x="160" y="515" on="0"/>
        <pt x="156" y="509" on="1"/>
        <pt x="143" y="489" on="0"/>
        <pt x="85" y="454" on="0"/>
        <pt x="59" y="449" on="1"/>
        <pt x="47" y="447" on="0"/>
        <pt x="43" y="447" on="1"/>
        <pt x="20" y="447" on="0"/>
        <pt x="20" y="465" on="1"/>
        <pt x="20" y="468" on="0"/>
        <pt x="22" y="478" on="1"/>
        <pt x="35" y="522" on="0"/>
        <pt x="76" y="565" on="1"/>
        <pt x="119" y="607" on="0"/>
        <pt x="173" y="632" on="1"/>
        <pt x="262" y="677" on="0"/>
        <pt x="385" y="685" on="1"/>
        <pt x="388" y="685" on="0"/>
        <pt x="425" y="686" on="0"/>
        <pt x="480" y="686" on="0"/>
        <pt x="505" y="686" on="1"/>
        <pt x="575" y="686" on="1"/>
        <pt x="653" y="686" on="0"/>
        <pt x="747" y="676" on="0"/>
        <pt x="782" y="658" on="1"/>
        <pt x="818" y="640" on="0"/>
        <pt x="834" y="611" on="1"/>
        <pt x="842" y="594" on="0"/>
        <pt x="842" y="565" on="1"/>
        <pt x="842" y="544" on="0"/>
        <pt x="840" y="533" on="1"/>
        <pt x="827" y="475" on="0"/>
        <pt x="785" y="426" on="1"/>
        <pt x="729" y="359" on="0"/>
        <pt x="632" y="318" on="1"/>
        <pt x="619" y="312" on="1"/>
        <pt x="626" y="302" on="1"/>
        <pt x="638" y="284" on="0"/>
        <pt x="669" y="224" on="1"/>
        <pt x="692" y="178" on="0"/>
        <pt x="696" y="172" on="1"/>
        <pt x="736" y="97" on="0"/>
        <pt x="768" y="86" on="1"/>
        <pt x="776" y="84" on="0"/>
        <pt x="784" y="84" on="1"/>
        <pt x="828" y="84" on="0"/>
        <pt x="867" y="115" on="1"/>
        <pt x="913" y="153" on="0"/>
        <pt x="957" y="153" on="1"/>
        <pt x="981" y="153" on="0"/>
        <pt x="981" y="136" on="1"/>
        <pt x="981" y="134" on="0"/>
        <pt x="979" y="126" on="1"/>
        <pt x="973" y="110" on="0"/>
        <pt x="946" y="87" on="1"/>
        <pt x="888" y="39" on="0"/>
        <pt x="746" y="-17" on="0"/>
        <pt x="684" y="-17" on="1"/>
        <pt x="663" y="-17" on="0"/>
        <pt x="654" y="-14" on="1"/>
        <pt x="617" y="-1" on="0"/>
        <pt x="590" y="36" on="1"/>
        <pt x="569" y="63" on="0"/>
        <pt x="535" y="130" on="1"/>
        <pt x="494" y="210" on="0"/>
        <pt x="477" y="234" on="1"/>
        <pt x="461" y="256" on="0"/>
        <pt x="446" y="265" on="1"/>
        <pt x="437" y="272" on="0"/>
        <pt x="421" y="274" on="1"/>
        <pt x="400" y="274" on="0"/>
        <pt x="400" y="291" on="1"/>
        <pt x="400" y="298" on="0"/>
        <pt x="403" y="304" on="1"/>
        <pt x="412" y="324" on="0"/>
        <pt x="466" y="363" on="0"/>
        <pt x="495" y="371" on="1"/>
        <pt x="501" y="373" on="0"/>
        <pt x="525" y="374" on="1"/>
        <pt x="650" y="381" on="0"/>
        <pt x="681" y="436" on="1"/>
        <pt x="699" y="467" on="0"/>
        <pt x="699" y="503" on="1"/>
        <pt x="699" y="550" on="0"/>
        <pt x="646" y="568" on="1"/>
        <pt x="589" y="586" on="0"/>
        <pt x="471" y="586" on="1"/>
        <pt x="449" y="586" on="1"/>
        <pt x="449" y="582" on="1"/>
        <pt x="448" y="579" on="0"/>
        <pt x="446" y="559" on="1"/>
        <pt x="425" y="367" on="0"/>
        <pt x="348" y="165" on="1"/>
        <pt x="313" y="73" on="0"/>
        <pt x="296" y="45" on="1"/>
        <pt x="281" y="23" on="0"/>
        <pt x="213" y="-16" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 19 values pushed */
          24 1 2 1 87 51 2 7 8 66 1 4 5 2 1 0 4 4 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          23
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 55 values pushed */
          0 2 1 8 1 2 8 112 0 8 7 1 8 7 110 0 7 5 1 7 5 110 0 5 4
          1 5 4 110 0 4 0 1 4 0 110 9 1 1 1 3 91 0 3 3 13 75 6 10 2
          0 0 14 0 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 53 values pushed */
          0 2 1 8 1 2 8 112 0 8 7 1 8 7 110 0 7 5 1 7 5 110 0 5 4
          1 5 4 110 0 4 0 1 4 0 110 0 3 9 1 1 2 3 1 99 6 10 2 0 0
          14 0 76
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 27 values pushed */
          1 0 103 101 95 94 86 85 74 72 65 63 61 59 38 31 23 21 10 7 0 112 1 112 11
          6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="S" xMin="25" yMin="-16" xMax="721" yMax="703">
      <contour>
        <pt x="203" y="290" on="1"/>
        <pt x="229" y="290" on="0"/>
        <pt x="231" y="274" on="1"/>
        <pt x="231" y="260" on="0"/>
        <pt x="221" y="248" on="1"/>
        <pt x="206" y="229" on="0"/>
        <pt x="180" y="213" on="1"/>
        <pt x="173" y="209" on="0"/>
        <pt x="170" y="202" on="0"/>
        <pt x="170" y="189" on="1"/>
        <pt x="170" y="175" on="0"/>
        <pt x="172" y="169" on="1"/>
        <pt x="179" y="145" on="0"/>
        <pt x="216" y="121" on="1"/>
        <pt x="273" y="83" on="0"/>
        <pt x="356" y="83" on="1"/>
        <pt x="414" y="83" on="0"/>
        <pt x="459" y="100" on="1"/>
        <pt x="493" y="111" on="0"/>
        <pt x="507" y="141" on="1"/>
        <pt x="518" y="165" on="0"/>
        <pt x="518" y="185" on="1"/>
        <pt x="518" y="215" on="0"/>
        <pt x="499" y="240" on="1"/>
        <pt x="467" y="283" on="0"/>
        <pt x="360" y="320" on="1"/>
        <pt x="290" y="343" on="0"/>
        <pt x="253" y="372" on="1"/>
        <pt x="217" y="401" on="0"/>
        <pt x="206" y="440" on="1"/>
        <pt x="204" y="448" on="0"/>
        <pt x="204" y="467" on="1"/>
        <pt x="204" y="476" on="1"/>
        <pt x="204" y="491" on="0"/>
        <pt x="211" y="513" on="1"/>
        <pt x="225" y="554" on="0"/>
        <pt x="301" y="630" on="0"/>
        <pt x="357" y="658" on="1"/>
        <pt x="445" y="703" on="0"/>
        <pt x="539" y="703" on="1"/>
        <pt x="635" y="703" on="0"/>
        <pt x="674" y="683" on="1"/>
        <pt x="721" y="664" on="0"/>
        <pt x="721" y="612" on="1"/>
        <pt x="721" y="588" on="0"/>
        <pt x="714" y="569" on="1"/>
        <pt x="704" y="547" on="0"/>
        <pt x="634" y="501" on="0"/>
        <pt x="601" y="499" on="1"/>
        <pt x="573" y="499" on="0"/>
        <pt x="573" y="516" on="1"/>
        <pt x="573" y="520" on="0"/>
        <pt x="577" y="538" on="0"/>
        <pt x="577" y="543" on="1"/>
        <pt x="577" y="566" on="0"/>
        <pt x="564" y="579" on="1"/>
        <pt x="559" y="585" on="0"/>
        <pt x="539" y="590" on="1"/>
        <pt x="490" y="603" on="0"/>
        <pt x="444" y="603" on="1"/>
        <pt x="419" y="603" on="0"/>
        <pt x="370" y="591" on="0"/>
        <pt x="364" y="583" on="1"/>
        <pt x="348" y="567" on="0"/>
        <pt x="348" y="533" on="1"/>
        <pt x="348" y="507" on="0"/>
        <pt x="363" y="485" on="1"/>
        <pt x="378" y="466" on="0"/>
        <pt x="404" y="450" on="1"/>
        <pt x="426" y="436" on="0"/>
        <pt x="473" y="420" on="1"/>
        <pt x="593" y="378" on="0"/>
        <pt x="633" y="330" on="1"/>
        <pt x="662" y="292" on="0"/>
        <pt x="662" y="249" on="1"/>
        <pt x="662" y="189" on="0"/>
        <pt x="570" y="77" on="0"/>
        <pt x="490" y="37" on="1"/>
        <pt x="387" y="-16" on="0"/>
        <pt x="257" y="-16" on="1"/>
        <pt x="218" y="-16" on="0"/>
        <pt x="208" y="-15" on="1"/>
        <pt x="118" y="0" on="0"/>
        <pt x="64" y="46" on="1"/>
        <pt x="25" y="75" on="0"/>
        <pt x="25" y="126" on="1"/>
        <pt x="25" y="152" on="0"/>
        <pt x="39" y="181" on="1"/>
        <pt x="76" y="254" on="0"/>
        <pt x="160" y="281" on="1"/>
        <pt x="183" y="289" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 10 values pushed */
          50 1 3 4 2 1 1 0 2 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          13
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 36 values pushed */
          0 3 4 0 4 3 104 6 1 0 1 4 0 1 110 0 4 4 2 91 0 2 2 13 75
          0 1 1 5 92 0 5 5 14 5 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 37 values pushed */
          0 3 4 0 4 3 0 112 6 1 0 1 4 0 1 110 0 4 4 2 91 0 2 2 13
          75 0 1 1 5 92 0 5 5 14 5 76
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 19 values pushed */
          1 0 80 78 60 58 49 47 40 38 16 14 0 90 1 90 7 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="T" xMin="38" yMin="-69" xMax="947" yMax="720">
      <contour>
        <pt x="61" y="462" on="1"/>
        <pt x="38" y="462" on="0"/>
        <pt x="38" y="479" on="1"/>
        <pt x="38" y="485" on="0"/>
        <pt x="41" y="494" on="1"/>
        <pt x="61" y="571" on="0"/>
        <pt x="163" y="634" on="1"/>
        <pt x="222" y="669" on="0"/>
        <pt x="289" y="683" on="1"/>
        <pt x="304" y="685" on="1"/>
        <pt x="393" y="686" on="0"/>
        <pt x="748" y="686" on="0"/>
        <pt x="837" y="687" on="1"/>
        <pt x="846" y="693" on="1"/>
        <pt x="876" y="712" on="0"/>
        <pt x="907" y="718" on="1"/>
        <pt x="913" y="720" on="0"/>
        <pt x="923" y="720" on="1"/>
        <pt x="947" y="720" on="0"/>
        <pt x="947" y="702" on="1"/>
        <pt x="945" y="675" on="0"/>
        <pt x="904" y="640" on="1"/>
        <pt x="845" y="591" on="0"/>
        <pt x="776" y="583" on="1"/>
        <pt x="774" y="583" on="0"/>
        <pt x="770" y="582" on="0"/>
        <pt x="767" y="582" on="0"/>
        <pt x="766" y="582" on="1"/>
        <pt x="764" y="581" on="1"/>
        <pt x="758" y="581" on="1"/>
        <pt x="753" y="581" on="0"/>
        <pt x="734" y="580" on="0"/>
        <pt x="709" y="580" on="0"/>
        <pt x="677" y="580" on="0"/>
        <pt x="662" y="580" on="1"/>
        <pt x="563" y="580" on="1"/>
        <pt x="514" y="385" on="1"/>
        <pt x="463" y="182" on="0"/>
        <pt x="461" y="174" on="1"/>
        <pt x="437" y="94" on="0"/>
        <pt x="402" y="24" on="1"/>
        <pt x="392" y="2" on="0"/>
        <pt x="385" y="-6" on="1"/>
        <pt x="367" y="-29" on="0"/>
        <pt x="300" y="-66" on="0"/>
        <pt x="266" y="-69" on="1"/>
        <pt x="242" y="-69" on="0"/>
        <pt x="242" y="-50" on="1"/>
        <pt x="244" y="-42" on="0"/>
        <pt x="253" y="-25" on="1"/>
        <pt x="287" y="47" on="0"/>
        <pt x="307" y="115" on="1"/>
        <pt x="308" y="117" on="0"/>
        <pt x="324" y="180" on="0"/>
        <pt x="351" y="289" on="0"/>
        <pt x="364" y="340" on="1"/>
        <pt x="413" y="545" on="0"/>
        <pt x="418" y="554" on="1"/>
        <pt x="423" y="567" on="0"/>
        <pt x="436" y="580" on="1"/>
        <pt x="207" y="580" on="1"/>
        <pt x="199" y="568" on="0"/>
        <pt x="194" y="552" on="1"/>
        <pt x="193" y="546" on="0"/>
        <pt x="190" y="537" on="1"/>
        <pt x="180" y="518" on="0"/>
        <pt x="125" y="478" on="0"/>
        <pt x="95" y="468" on="1"/>
        <pt x="76" y="462" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 14 values pushed */
          19 1 1 2 2 1 0 3 47 1 4 0 3 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          29
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 30 values pushed */
          6 1 0 3 4 3 0 4 112 0 4 4 113 0 2 2 13 75 5 1 3 3 1 89 0
          1 1 13 3 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 35 values pushed */
          0 2 1 2 114 6 1 0 3 4 3 0 4 112 0 4 4 113 0 1 3 3 1 85 0
          1 1 3 89 5 1 3 1 3 77
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 19 values pushed */
          1 0 60 59 46 45 35 29 18 17 12 9 0 68 1 68 7 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="U" xMin="-10" yMin="-24" xMax="771" yMax="686">
      <contour>
        <pt x="15" y="552" on="1"/>
        <pt x="-10" y="552" on="0"/>
        <pt x="-10" y="570" on="1"/>
        <pt x="-10" y="583" on="0"/>
        <pt x="10" y="605" on="1"/>
        <pt x="43" y="635" on="0"/>
        <pt x="153" y="680" on="0"/>
        <pt x="202" y="685" on="1"/>
        <pt x="204" y="686" on="0"/>
        <pt x="222" y="686" on="1"/>
        <pt x="283" y="686" on="0"/>
        <pt x="283" y="631" on="1"/>
        <pt x="283" y="592" on="0"/>
        <pt x="254" y="521" on="1"/>
        <pt x="245" y="497" on="0"/>
        <pt x="213" y="425" on="1"/>
        <pt x="158" y="299" on="0"/>
        <pt x="144" y="246" on="1"/>
        <pt x="135" y="212" on="0"/>
        <pt x="135" y="181" on="1"/>
        <pt x="135" y="127" on="0"/>
        <pt x="161" y="101" on="1"/>
        <pt x="181" y="83" on="0"/>
        <pt x="205" y="83" on="1"/>
        <pt x="221" y="83" on="0"/>
        <pt x="259" y="106" on="1"/>
        <pt x="337" y="158" on="0"/>
        <pt x="525" y="387" on="0"/>
        <pt x="583" y="499" on="1"/>
        <pt x="587" y="508" on="0"/>
        <pt x="612" y="570" on="0"/>
        <pt x="623" y="597" on="1"/>
        <pt x="634" y="624" on="1"/>
        <pt x="649" y="647" on="0"/>
        <pt x="721" y="686" on="0"/>
        <pt x="748" y="686" on="1"/>
        <pt x="771" y="686" on="0"/>
        <pt x="771" y="669" on="1"/>
        <pt x="771" y="646" on="0"/>
        <pt x="738" y="574" on="1"/>
        <pt x="731" y="559" on="0"/>
        <pt x="713" y="506" on="1"/>
        <pt x="667" y="377" on="0"/>
        <pt x="630" y="229" on="1"/>
        <pt x="615" y="168" on="0"/>
        <pt x="610" y="105" on="1"/>
        <pt x="610" y="89" on="0"/>
        <pt x="617" y="78" on="1"/>
        <pt x="641" y="90" on="1"/>
        <pt x="681" y="111" on="0"/>
        <pt x="706" y="112" on="1"/>
        <pt x="733" y="112" on="0"/>
        <pt x="733" y="94" on="1"/>
        <pt x="733" y="81" on="0"/>
        <pt x="714" y="60" on="1"/>
        <pt x="694" y="40" on="0"/>
        <pt x="633" y="10" on="1"/>
        <pt x="567" y="-23" on="0"/>
        <pt x="532" y="-24" on="1"/>
        <pt x="466" y="-24" on="0"/>
        <pt x="466" y="32" on="1"/>
        <pt x="466" y="52" on="0"/>
        <pt x="469" y="74" on="1"/>
        <pt x="474" y="127" on="0"/>
        <pt x="500" y="225" on="1"/>
        <pt x="274" y="-17" on="0"/>
        <pt x="102" y="-17" on="1"/>
        <pt x="76" y="-17" on="0"/>
        <pt x="53" y="-5" on="1"/>
        <pt x="-10" y="26" on="0"/>
        <pt x="-10" y="118" on="1"/>
        <pt x="-10" y="164" on="0"/>
        <pt x="10" y="225" on="1"/>
        <pt x="29" y="280" on="0"/>
        <pt x="76" y="389" on="1"/>
        <pt x="117" y="481" on="0"/>
        <pt x="132" y="528" on="1"/>
        <pt x="139" y="549" on="0"/>
        <pt x="139" y="567" on="1"/>
        <pt x="139" y="587" on="0"/>
        <pt x="123" y="587" on="1"/>
        <pt x="108" y="587" on="0"/>
        <pt x="88" y="577" on="1"/>
        <pt x="41" y="552" on="0"/>
      </contour>
      <instructions><assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          34
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 14 values pushed */
          64 1 4 0 45 1 2 4 47 1 5 2 3 74
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 14 values pushed */
          64 1 4 0 45 1 2 4 47 1 6 2 3 74
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          28
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 41 values pushed */
          0 7 1 0 1 7 0 112 8 1 0 4 1 0 4 110 0 4 2 1 4 2 110 3 1
          1 1 13 75 0 2 2 5 92 6 1 5 5 14 5 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          34
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 34 values pushed */
          3 1 1 7 1 114 0 7 0 7 114 8 1 0 4 0 114 0 4 2 4 114 0 2 2
          5 92 6 1 5 5 14 5 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 38 values pushed */
          3 1 1 7 1 114 0 7 0 7 114 8 1 0 4 0 114 0 4 2 4 114 0 2 2
          6 92 0 6 6 14 75 0 5 5 14 5 76
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 23 values pushed */
          1 0 81 79 67 65 59 57 51 49 36 34 24 22 10 7 0 83 1 83 9 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="V" xMin="25" yMin="-77" xMax="774" yMax="686">
      <contour>
        <pt x="50" y="589" on="1"/>
        <pt x="25" y="589" on="0"/>
        <pt x="25" y="608" on="1"/>
        <pt x="25" y="628" on="0"/>
        <pt x="85" y="676" on="0"/>
        <pt x="119" y="684" on="1"/>
        <pt x="127" y="686" on="0"/>
        <pt x="148" y="686" on="1"/>
        <pt x="229" y="681" on="0"/>
        <pt x="280" y="618" on="1"/>
        <pt x="350" y="532" on="0"/>
        <pt x="371" y="339" on="1"/>
        <pt x="379" y="277" on="0"/>
        <pt x="380" y="184" on="1"/>
        <pt x="381" y="134" on="1"/>
        <pt x="399" y="148" on="1"/>
        <pt x="548" y="260" on="0"/>
        <pt x="631" y="366" on="1"/>
        <pt x="672" y="417" on="0"/>
        <pt x="686" y="454" on="1"/>
        <pt x="689" y="460" on="0"/>
        <pt x="689" y="467" on="1"/>
        <pt x="686" y="494" on="0"/>
        <pt x="634" y="529" on="0"/>
        <pt x="600" y="532" on="1"/>
        <pt x="576" y="532" on="0"/>
        <pt x="576" y="567" on="1"/>
        <pt x="576" y="596" on="0"/>
        <pt x="600" y="656" on="0"/>
        <pt x="618" y="674" on="1"/>
        <pt x="630" y="685" on="0"/>
        <pt x="641" y="685" on="1"/>
        <pt x="649" y="685" on="1"/>
        <pt x="706" y="685" on="0"/>
        <pt x="774" y="605" on="0"/>
        <pt x="774" y="545" on="1"/>
        <pt x="774" y="515" on="0"/>
        <pt x="765" y="479" on="1"/>
        <pt x="716" y="280" on="0"/>
        <pt x="461" y="66" on="1"/>
        <pt x="358" y="-20" on="0"/>
        <pt x="280" y="-66" on="1"/>
        <pt x="262" y="-77" on="0"/>
        <pt x="255" y="-77" on="1"/>
        <pt x="237" y="-77" on="0"/>
        <pt x="237" y="-23" on="1"/>
        <pt x="241" y="20" on="0"/>
        <pt x="241" y="109" on="1"/>
        <pt x="241" y="191" on="0"/>
        <pt x="237" y="235" on="1"/>
        <pt x="217" y="499" on="0"/>
        <pt x="115" y="569" on="1"/>
        <pt x="91" y="586" on="0"/>
      </contour>
      <instructions><assembly>
          PUSHB[ ]	/* 7 values pushed */
          45 14 2 4 2 1 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          25
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 26 values pushed */
          0 0 1 2 1 0 2 112 0 2 4 1 2 4 110 0 4 4 113 3 1 1 1 13 1
          76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 20 values pushed */
          3 1 1 0 1 114 0 0 2 0 114 0 2 4 2 114 0 4 4 105
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 11 values pushed */
          44 42 33 30 25 24 37 16 5 6 22
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="W" xMin="25" yMin="-77" xMax="1206" yMax="686">
      <contour>
        <pt x="25" y="607" on="1"/>
        <pt x="25" y="631" on="0"/>
        <pt x="102" y="686" on="0"/>
        <pt x="142" y="686" on="1"/>
        <pt x="191" y="686" on="0"/>
        <pt x="232" y="658" on="1"/>
        <pt x="326" y="596" on="0"/>
        <pt x="343" y="375" on="1"/>
        <pt x="347" y="321" on="0"/>
        <pt x="347" y="275" on="1"/>
        <pt x="347" y="249" on="0"/>
        <pt x="345" y="203" on="1"/>
        <pt x="345" y="189" on="1"/>
        <pt x="348" y="192" on="0"/>
        <pt x="355" y="200" on="0"/>
        <pt x="367" y="214" on="0"/>
        <pt x="373" y="221" on="1"/>
        <pt x="491" y="362" on="0"/>
        <pt x="587" y="516" on="1"/>
        <pt x="629" y="584" on="0"/>
        <pt x="629" y="587" on="1"/>
        <pt x="629" y="588" on="0"/>
        <pt x="622" y="606" on="0"/>
        <pt x="622" y="607" on="1"/>
        <pt x="622" y="630" on="0"/>
        <pt x="696" y="683" on="0"/>
        <pt x="732" y="686" on="1"/>
        <pt x="744" y="686" on="1"/>
        <pt x="745" y="686" on="0"/>
        <pt x="756" y="679" on="0"/>
        <pt x="757" y="678" on="1"/>
        <pt x="757" y="677" on="0"/>
        <pt x="764" y="662" on="0"/>
        <pt x="774" y="640" on="0"/>
        <pt x="778" y="630" on="1"/>
        <pt x="871" y="412" on="0"/>
        <pt x="904" y="183" on="1"/>
        <pt x="908" y="157" on="0"/>
        <pt x="910" y="151" on="1"/>
        <pt x="925" y="169" on="1"/>
        <pt x="1043" y="304" on="0"/>
        <pt x="1097" y="407" on="1"/>
        <pt x="1111" y="435" on="0"/>
        <pt x="1118" y="456" on="1"/>
        <pt x="1121" y="464" on="0"/>
        <pt x="1121" y="474" on="1"/>
        <pt x="1120" y="498" on="0"/>
        <pt x="1085" y="530" on="0"/>
        <pt x="1059" y="532" on="1"/>
        <pt x="1036" y="532" on="0"/>
        <pt x="1036" y="568" on="1"/>
        <pt x="1036" y="592" on="0"/>
        <pt x="1045" y="616" on="1"/>
        <pt x="1063" y="671" on="0"/>
        <pt x="1097" y="686" on="1"/>
        <pt x="1109" y="686" on="1"/>
        <pt x="1156" y="684" on="0"/>
        <pt x="1206" y="609" on="0"/>
        <pt x="1206" y="551" on="1"/>
        <pt x="1206" y="535" on="0"/>
        <pt x="1204" y="519" on="1"/>
        <pt x="1193" y="442" on="0"/>
        <pt x="1144" y="345" on="1"/>
        <pt x="1065" y="189" on="0"/>
        <pt x="897" y="7" on="1"/>
        <pt x="829" y="-66" on="0"/>
        <pt x="817" y="-73" on="1"/>
        <pt x="807" y="-77" on="0"/>
        <pt x="801" y="-77" on="0"/>
        <pt x="797" y="-75" on="1"/>
        <pt x="787" y="-69" on="0"/>
        <pt x="783" y="-26" on="1"/>
        <pt x="769" y="176" on="0"/>
        <pt x="710" y="373" on="1"/>
        <pt x="671" y="501" on="0"/>
        <pt x="665" y="501" on="1"/>
        <pt x="664" y="501" on="0"/>
        <pt x="650" y="476" on="1"/>
        <pt x="493" y="213" on="0"/>
        <pt x="280" y="-15" on="1"/>
        <pt x="233" y="-66" on="0"/>
        <pt x="223" y="-73" on="1"/>
        <pt x="215" y="-77" on="0"/>
        <pt x="210" y="-77" on="1"/>
        <pt x="191" y="-77" on="0"/>
        <pt x="191" y="-40" on="1"/>
        <pt x="191" y="-26" on="0"/>
        <pt x="192" y="-20" on="1"/>
        <pt x="209" y="55" on="0"/>
        <pt x="209" y="217" on="1"/>
        <pt x="209" y="504" on="0"/>
        <pt x="108" y="571" on="1"/>
        <pt x="81" y="589" on="0"/>
        <pt x="45" y="589" on="1"/>
        <pt x="37" y="589" on="0"/>
        <pt x="25" y="599" on="0"/>
      </contour>
      <instructions><assembly>
          PUSHB[ ]	/* 7 values pushed */
          71 12 2 4 2 1 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          29
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 27 values pushed */
          0 5 0 2 0 5 2 112 0 2 4 0 2 4 110 0 4 4 113 3 1 2 0 0 13
          0 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 21 values pushed */
          3 1 2 0 5 0 114 0 5 2 5 114 0 2 4 2 114 0 4 4 105
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 14 values pushed */
          93 92 84 82 56 54 49 48 27 26 34 6 6 21
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="X" xMin="56" yMin="1" xMax="906" yMax="686">
      <contour>
        <pt x="265" y="560" on="1"/>
        <pt x="243" y="560" on="0"/>
        <pt x="243" y="577" on="1"/>
        <pt x="243" y="601" on="0"/>
        <pt x="307" y="659" on="0"/>
        <pt x="350" y="673" on="1"/>
        <pt x="388" y="686" on="0"/>
        <pt x="447" y="686" on="1"/>
        <pt x="455" y="686" on="0"/>
        <pt x="466" y="686" on="1"/>
        <pt x="478" y="685" on="1"/>
        <pt x="502" y="681" on="0"/>
        <pt x="522" y="663" on="1"/>
        <pt x="551" y="637" on="0"/>
        <pt x="562" y="576" on="1"/>
        <pt x="563" y="573" on="0"/>
        <pt x="577" y="441" on="0"/>
        <pt x="577" y="437" on="1"/>
        <pt x="577" y="436" on="0"/>
        <pt x="650" y="478" on="0"/>
        <pt x="739" y="535" on="0"/>
        <pt x="756" y="551" on="1"/>
        <pt x="762" y="558" on="0"/>
        <pt x="762" y="562" on="1"/>
        <pt x="762" y="582" on="0"/>
        <pt x="730" y="586" on="1"/>
        <pt x="717" y="587" on="0"/>
        <pt x="712" y="596" on="1"/>
        <pt x="709" y="604" on="0"/>
        <pt x="712" y="613" on="1"/>
        <pt x="720" y="637" on="0"/>
        <pt x="797" y="686" on="0"/>
        <pt x="834" y="686" on="1"/>
        <pt x="863" y="686" on="0"/>
        <pt x="906" y="653" on="0"/>
        <pt x="906" y="627" on="1"/>
        <pt x="906" y="602" on="0"/>
        <pt x="885" y="574" on="1"/>
        <pt x="868" y="550" on="0"/>
        <pt x="834" y="522" on="1"/>
        <pt x="766" y="466" on="0"/>
        <pt x="614" y="379" on="1"/>
        <pt x="584" y="362" on="1"/>
        <pt x="584" y="357" on="1"/>
        <pt x="585" y="355" on="0"/>
        <pt x="603" y="184" on="0"/>
        <pt x="603" y="183" on="1"/>
        <pt x="609" y="141" on="0"/>
        <pt x="637" y="100" on="0"/>
        <pt x="671" y="100" on="1"/>
        <pt x="680" y="100" on="0"/>
        <pt x="687" y="104" on="1"/>
        <pt x="721" y="126" on="0"/>
        <pt x="754" y="126" on="1"/>
        <pt x="778" y="126" on="0"/>
        <pt x="778" y="107" on="1"/>
        <pt x="776" y="86" on="0"/>
        <pt x="752" y="62" on="1"/>
        <pt x="701" y="13" on="0"/>
        <pt x="626" y="2" on="1"/>
        <pt x="615" y="1" on="0"/>
        <pt x="578" y="1" on="1"/>
        <pt x="542" y="1" on="0"/>
        <pt x="535" y="3" on="1"/>
        <pt x="496" y="15" on="0"/>
        <pt x="477" y="53" on="1"/>
        <pt x="466" y="73" on="0"/>
        <pt x="458" y="120" on="0"/>
        <pt x="449" y="201" on="1"/>
        <pt x="447" y="220" on="0"/>
        <pt x="443" y="260" on="0"/>
        <pt x="442" y="270" on="1"/>
        <pt x="441" y="281" on="1"/>
        <pt x="435" y="281" on="0"/>
        <pt x="357" y="233" on="1"/>
        <pt x="240" y="165" on="0"/>
        <pt x="206" y="135" on="1"/>
        <pt x="200" y="128" on="0"/>
        <pt x="200" y="124" on="1"/>
        <pt x="200" y="115" on="0"/>
        <pt x="208" y="107" on="1"/>
        <pt x="212" y="104" on="0"/>
        <pt x="236" y="99" on="0"/>
        <pt x="252" y="91" on="0"/>
        <pt x="252" y="82" on="1"/>
        <pt x="252" y="67" on="0"/>
        <pt x="232" y="47" on="1"/>
        <pt x="199" y="14" on="0"/>
        <pt x="155" y="3" on="1"/>
        <pt x="148" y="1" on="0"/>
        <pt x="129" y="1" on="1"/>
        <pt x="120" y="1" on="1"/>
        <pt x="93" y="1" on="0"/>
        <pt x="56" y="36" on="0"/>
        <pt x="56" y="60" on="1"/>
        <pt x="56" y="83" on="0"/>
        <pt x="77" y="113" on="1"/>
        <pt x="96" y="138" on="0"/>
        <pt x="128" y="164" on="1"/>
        <pt x="205" y="228" on="0"/>
        <pt x="414" y="345" on="1"/>
        <pt x="428" y="352" on="0"/>
        <pt x="434" y="357" on="0"/>
        <pt x="433" y="359" on="1"/>
        <pt x="433" y="363" on="0"/>
        <pt x="426" y="428" on="1"/>
        <pt x="420" y="501" on="0"/>
        <pt x="414" y="522" on="1"/>
        <pt x="405" y="558" on="0"/>
        <pt x="387" y="575" on="1"/>
        <pt x="376" y="586" on="0"/>
        <pt x="350" y="586" on="1"/>
        <pt x="341" y="586" on="1"/>
        <pt x="332" y="580" on="1"/>
        <pt x="294" y="560" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 11 values pushed */
          72 42 2 4 0 55 1 3 4 2 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          29
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 43 values pushed */
          0 7 1 0 1 7 0 112 8 1 0 4 1 0 4 110 0 4 3 1 4 3 110 0 3
          5 1 3 5 110 2 1 1 1 13 75 6 1 5 5 16 5 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 34 values pushed */
          2 1 1 7 1 114 0 7 0 7 114 8 1 0 4 0 114 0 4 3 4 114 0 3 5
          3 114 6 1 5 5 16 5 76
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 23 values pushed */
          1 0 112 110 92 89 62 60 54 52 50 48 33 31 9 6 0 114 1 114 9 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="Y" xMin="36" yMin="-164" xMax="797" yMax="686">
      <contour>
        <pt x="73" y="555" on="1"/>
        <pt x="49" y="555" on="0"/>
        <pt x="49" y="573" on="1"/>
        <pt x="49" y="589" on="0"/>
        <pt x="71" y="612" on="1"/>
        <pt x="149" y="686" on="0"/>
        <pt x="239" y="686" on="1"/>
        <pt x="263" y="686" on="0"/>
        <pt x="283" y="681" on="1"/>
        <pt x="335" y="668" on="0"/>
        <pt x="376" y="624" on="1"/>
        <pt x="405" y="595" on="0"/>
        <pt x="430" y="542" on="1"/>
        <pt x="475" y="449" on="0"/>
        <pt x="494" y="290" on="1"/>
        <pt x="503" y="207" on="0"/>
        <pt x="503" y="173" on="1"/>
        <pt x="503" y="165" on="0"/>
        <pt x="504" y="165" on="1"/>
        <pt x="506" y="165" on="0"/>
        <pt x="543" y="203" on="0"/>
        <pt x="556" y="218" on="1"/>
        <pt x="661" y="328" on="0"/>
        <pt x="707" y="445" on="1"/>
        <pt x="718" y="476" on="0"/>
        <pt x="718" y="485" on="1"/>
        <pt x="718" y="514" on="0"/>
        <pt x="662" y="552" on="0"/>
        <pt x="628" y="552" on="1"/>
        <pt x="618" y="552" on="0"/>
        <pt x="607" y="576" on="0"/>
        <pt x="607" y="590" on="1"/>
        <pt x="607" y="617" on="0"/>
        <pt x="637" y="675" on="0"/>
        <pt x="658" y="685" on="1"/>
        <pt x="661" y="686" on="0"/>
        <pt x="671" y="686" on="1"/>
        <pt x="722" y="686" on="0"/>
        <pt x="786" y="624" on="0"/>
        <pt x="795" y="577" on="1"/>
        <pt x="797" y="568" on="0"/>
        <pt x="797" y="545" on="1"/>
        <pt x="797" y="507" on="0"/>
        <pt x="783" y="460" on="1"/>
        <pt x="738" y="305" on="0"/>
        <pt x="602" y="146" on="1"/>
        <pt x="490" y="16" on="0"/>
        <pt x="352" y="-81" on="1"/>
        <pt x="258" y="-147" on="0"/>
        <pt x="203" y="-161" on="1"/>
        <pt x="191" y="-164" on="0"/>
        <pt x="176" y="-164" on="1"/>
        <pt x="123" y="-164" on="0"/>
        <pt x="51" y="-102" on="0"/>
        <pt x="40" y="-56" on="1"/>
        <pt x="36" y="-36" on="0"/>
        <pt x="36" y="-29" on="1"/>
        <pt x="36" y="5" on="0"/>
        <pt x="75" y="67" on="0"/>
        <pt x="95" y="67" on="1"/>
        <pt x="109" y="67" on="0"/>
        <pt x="114" y="44" on="1"/>
        <pt x="125" y="5" on="0"/>
        <pt x="154" y="-12" on="1"/>
        <pt x="183" y="-30" on="0"/>
        <pt x="216" y="-30" on="1"/>
        <pt x="224" y="-30" on="0"/>
        <pt x="227" y="-29" on="1"/>
        <pt x="253" y="-23" on="0"/>
        <pt x="305" y="7" on="1"/>
        <pt x="310" y="11" on="0"/>
        <pt x="338" y="29" on="0"/>
        <pt x="361" y="44" on="0"/>
        <pt x="367" y="49" on="1"/>
        <pt x="367" y="54" on="1"/>
        <pt x="367" y="73" on="0"/>
        <pt x="366" y="89" on="1"/>
        <pt x="357" y="345" on="0"/>
        <pt x="292" y="475" on="1"/>
        <pt x="272" y="516" on="0"/>
        <pt x="243" y="546" on="1"/>
        <pt x="206" y="581" on="0"/>
        <pt x="156" y="588" on="1"/>
        <pt x="146" y="581" on="1"/>
        <pt x="108" y="555" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 14 values pushed */
          82 1 0 1 16 1 5 0 73 1 6 5 3 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          29
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 31 values pushed */
          2 7 2 0 1 5 1 0 5 112 0 5 6 1 5 6 110 0 6 0 4 6 4 96 3
          1 1 1 13 1 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 34 values pushed */
          3 1 1 0 1 114 2 7 2 0 5 0 114 0 5 6 5 114 0 6 4 4 6 87 0
          6 6 4 92 0 4 6 4 80
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 21 values pushed */
          1 0 65 64 60 58 52 50 37 36 29 27 7 5 0 84 1 84 8 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="Z" xMin="46" yMin="0" xMax="853" yMax="686">
      <contour>
        <pt x="622" y="574" on="1"/>
        <pt x="494" y="579" on="0"/>
        <pt x="420" y="579" on="1"/>
        <pt x="397" y="579" on="1"/>
        <pt x="372" y="579" on="0"/>
        <pt x="355" y="570" on="0"/>
        <pt x="351" y="550" on="1"/>
        <pt x="341" y="523" on="0"/>
        <pt x="286" y="481" on="0"/>
        <pt x="253" y="470" on="1"/>
        <pt x="236" y="463" on="0"/>
        <pt x="218" y="462" on="1"/>
        <pt x="194" y="462" on="0"/>
        <pt x="194" y="478" on="1"/>
        <pt x="194" y="484" on="0"/>
        <pt x="197" y="492" on="1"/>
        <pt x="214" y="547" on="0"/>
        <pt x="275" y="597" on="1"/>
        <pt x="371" y="674" on="0"/>
        <pt x="484" y="685" on="1"/>
        <pt x="509" y="685" on="1"/>
        <pt x="538" y="685" on="0"/>
        <pt x="730" y="680" on="0"/>
        <pt x="755" y="680" on="1"/>
        <pt x="791" y="680" on="0"/>
        <pt x="812" y="684" on="1"/>
        <pt x="828" y="686" on="0"/>
        <pt x="831" y="686" on="1"/>
        <pt x="853" y="686" on="0"/>
        <pt x="853" y="669" on="1"/>
        <pt x="853" y="657" on="0"/>
        <pt x="826" y="626" on="1"/>
        <pt x="742" y="532" on="0"/>
        <pt x="641" y="437" on="1"/>
        <pt x="619" y="415" on="1"/>
        <pt x="622" y="414" on="1"/>
        <pt x="626" y="414" on="0"/>
        <pt x="637" y="414" on="0"/>
        <pt x="642" y="414" on="1"/>
        <pt x="675" y="413" on="0"/>
        <pt x="684" y="407" on="1"/>
        <pt x="697" y="400" on="0"/>
        <pt x="697" y="388" on="1"/>
        <pt x="697" y="386" on="0"/>
        <pt x="695" y="378" on="1"/>
        <pt x="688" y="358" on="0"/>
        <pt x="637" y="323" on="0"/>
        <pt x="607" y="323" on="1"/>
        <pt x="600" y="323" on="0"/>
        <pt x="598" y="324" on="1"/>
        <pt x="591" y="328" on="0"/>
        <pt x="546" y="329" on="1"/>
        <pt x="522" y="329" on="1"/>
        <pt x="517" y="325" on="1"/>
        <pt x="432" y="248" on="0"/>
        <pt x="289" y="136" on="1"/>
        <pt x="260" y="113" on="1"/>
        <pt x="318" y="112" on="1"/>
        <pt x="341" y="111" on="0"/>
        <pt x="552" y="108" on="0"/>
        <pt x="587" y="106" on="1"/>
        <pt x="627" y="106" on="1"/>
        <pt x="649" y="141" on="0"/>
        <pt x="656" y="170" on="1"/>
        <pt x="666" y="198" on="0"/>
        <pt x="757" y="253" on="0"/>
        <pt x="788" y="253" on="1"/>
        <pt x="811" y="253" on="0"/>
        <pt x="811" y="237" on="1"/>
        <pt x="811" y="232" on="0"/>
        <pt x="808" y="221" on="1"/>
        <pt x="797" y="181" on="0"/>
        <pt x="743" y="102" on="0"/>
        <pt x="710" y="77" on="1"/>
        <pt x="640" y="17" on="0"/>
        <pt x="560" y="3" on="1"/>
        <pt x="547" y="1" on="0"/>
        <pt x="484" y="1" on="1"/>
        <pt x="443" y="1" on="0"/>
        <pt x="206" y="6" on="0"/>
        <pt x="177" y="6" on="1"/>
        <pt x="123" y="6" on="0"/>
        <pt x="95" y="2" on="1"/>
        <pt x="83" y="2" on="0"/>
        <pt x="71" y="0" on="1"/>
        <pt x="46" y="0" on="0"/>
        <pt x="46" y="17" on="1"/>
        <pt x="46" y="28" on="0"/>
        <pt x="58" y="44" on="1"/>
        <pt x="71" y="58" on="0"/>
        <pt x="106" y="84" on="1"/>
        <pt x="252" y="196" on="0"/>
        <pt x="383" y="307" on="1"/>
        <pt x="408" y="329" on="1"/>
        <pt x="361" y="329" on="1"/>
        <pt x="314" y="330" on="1"/>
        <pt x="297" y="337" on="0"/>
        <pt x="297" y="350" on="1"/>
        <pt x="297" y="356" on="0"/>
        <pt x="302" y="366" on="1"/>
        <pt x="310" y="382" on="0"/>
        <pt x="348" y="409" on="0"/>
        <pt x="368" y="413" on="1"/>
        <pt x="375" y="415" on="0"/>
        <pt x="441" y="415" on="1"/>
        <pt x="506" y="415" on="1"/>
        <pt x="531" y="439" on="1"/>
        <pt x="593" y="499" on="0"/>
        <pt x="647" y="555" on="1"/>
        <pt x="664" y="574" on="1"/>
      </contour>
      <instructions><assembly>
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          39
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 15 values pushed */
          13 1 1 0 97 42 2 5 4 68 1 7 8 3 74
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          46
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 15 values pushed */
          13 1 1 0 97 42 2 12 4 68 1 7 8 3 74
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 15 values pushed */
          13 1 1 0 97 42 2 6 4 68 1 7 8 3 74
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          24
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 52 values pushed */
          0 1 0 4 0 1 4 112 0 8 5 7 5 8 7 112 13 1 4 12 6 2 5 8 4
          5 99 14 1 0 0 2 91 3 1 2 2 13 75 0 7 7 9 91 11 10 2 9 9 16
          9 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          39
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 50 values pushed */
          0 1 0 4 0 1 4 112 0 8 5 7 5 8 7 112 3 1 2 14 1 0 1 2 0
          99 13 1 4 12 6 2 5 8 4 5 99 0 7 7 9 91 11 10 2 9 9 16 9 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          46
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 55 values pushed */
          0 1 0 4 0 1 4 112 0 8 5 7 5 8 7 112 3 1 2 14 1 0 1 2 0
          99 0 12 5 4 12 85 13 1 4 6 1 5 8 4 5 99 0 7 7 9 91 11 10 2
          9 9 16 9 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 55 values pushed */
          0 1 0 4 0 1 4 112 0 8 5 7 5 8 7 112 3 1 2 14 1 0 1 2 0
          99 12 1 6 5 4 6 87 13 1 4 0 5 8 4 5 99 0 7 7 9 91 11 10 2
          9 9 16 9 76
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 35 values pushed */
          4 0 105 103 95 93 85 84 83 82 81 76 67 65 61 56 52 50 47 46 39 34 28 26 24
          19 12 10 0 109 4 109 15 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="eight" xMin="48" yMin="-17" xMax="526" yMax="661">
      <contour>
        <pt x="526" y="189" on="1"/>
        <pt x="526" y="92" on="0"/>
        <pt x="390" y="-17" on="0"/>
        <pt x="282" y="-17" on="1"/>
        <pt x="241" y="-17" on="0"/>
        <pt x="196" y="-7" on="1"/>
        <pt x="125" y="10" on="0"/>
        <pt x="48" y="99" on="0"/>
        <pt x="48" y="164" on="1"/>
        <pt x="48" y="204" on="0"/>
        <pt x="65" y="238" on="1"/>
        <pt x="92" y="290" on="0"/>
        <pt x="163" y="329" on="1"/>
        <pt x="159" y="332" on="0"/>
        <pt x="155" y="336" on="1"/>
        <pt x="134" y="349" on="0"/>
        <pt x="110" y="382" on="1"/>
        <pt x="80" y="427" on="0"/>
        <pt x="80" y="477" on="1"/>
        <pt x="80" y="533" on="0"/>
        <pt x="110" y="581" on="1"/>
        <pt x="122" y="599" on="0"/>
        <pt x="147" y="620" on="1"/>
        <pt x="190" y="651" on="0"/>
        <pt x="246" y="658" on="1"/>
        <pt x="260" y="660" on="0"/>
        <pt x="264" y="660" on="1"/>
        <pt x="266" y="660" on="0"/>
        <pt x="284" y="661" on="0"/>
        <pt x="290" y="661" on="1"/>
        <pt x="384" y="661" on="0"/>
        <pt x="494" y="577" on="0"/>
        <pt x="494" y="506" on="1"/>
        <pt x="494" y="424" on="0"/>
        <pt x="414" y="376" on="1"/>
        <pt x="406" y="370" on="1"/>
        <pt x="406" y="368" on="0"/>
        <pt x="414" y="365" on="1"/>
        <pt x="466" y="336" on="0"/>
        <pt x="526" y="242" on="0"/>
      </contour>
      <contour>
        <pt x="406" y="506" on="1"/>
        <pt x="406" y="555" on="0"/>
        <pt x="339" y="607" on="0"/>
        <pt x="283" y="607" on="1"/>
        <pt x="191" y="605" on="0"/>
        <pt x="173" y="560" on="1"/>
        <pt x="168" y="547" on="0"/>
        <pt x="168" y="536" on="1"/>
        <pt x="168" y="507" on="0"/>
        <pt x="199" y="486" on="1"/>
        <pt x="215" y="475" on="0"/>
        <pt x="275" y="443" on="1"/>
        <pt x="346" y="403" on="1"/>
        <pt x="362" y="415" on="0"/>
        <pt x="368" y="421" on="1"/>
        <pt x="406" y="456" on="0"/>
      </contour>
      <contour>
        <pt x="291" y="42" on="1"/>
        <pt x="352" y="42" on="0"/>
        <pt x="425" y="87" on="0"/>
        <pt x="425" y="134" on="1"/>
        <pt x="425" y="141" on="1"/>
        <pt x="425" y="179" on="0"/>
        <pt x="384" y="204" on="1"/>
        <pt x="374" y="212" on="0"/>
        <pt x="302" y="251" on="1"/>
        <pt x="286" y="260" on="0"/>
        <pt x="245" y="283" on="0"/>
        <pt x="235" y="288" on="1"/>
        <pt x="225" y="294" on="1"/>
        <pt x="218" y="294" on="0"/>
        <pt x="192" y="268" on="1"/>
        <pt x="148" y="224" on="0"/>
        <pt x="148" y="163" on="1"/>
        <pt x="148" y="103" on="0"/>
        <pt x="224" y="42" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 43 values pushed */
          68 52 35 12 4 3 2 1 74 0 1 0 2 3 1 2 99 4 1 3 3 0 91 0 0
          0 14 0 76 57 56 56 74 57 74 44 42 30 25 34 5 6 21
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="five" xMin="57" yMin="-211" xMax="517" yMax="461">
      <contour>
        <pt x="458" y="461" on="1"/>
        <pt x="472" y="461" on="0"/>
        <pt x="472" y="435" on="1"/>
        <pt x="472" y="420" on="0"/>
        <pt x="470" y="418" on="1"/>
        <pt x="468" y="413" on="0"/>
        <pt x="444" y="387" on="1"/>
        <pt x="370" y="313" on="0"/>
        <pt x="261" y="299" on="1"/>
        <pt x="245" y="297" on="0"/>
        <pt x="226" y="297" on="1"/>
        <pt x="189" y="297" on="0"/>
        <pt x="171" y="301" on="1"/>
        <pt x="168" y="301" on="1"/>
        <pt x="168" y="182" on="1"/>
        <pt x="169" y="182" on="0"/>
        <pt x="176" y="187" on="1"/>
        <pt x="226" y="217" on="0"/>
        <pt x="292" y="217" on="1"/>
        <pt x="351" y="217" on="0"/>
        <pt x="406" y="192" on="1"/>
        <pt x="456" y="166" on="0"/>
        <pt x="517" y="70" on="0"/>
        <pt x="517" y="5" on="1"/>
        <pt x="517" y="-96" on="0"/>
        <pt x="368" y="-211" on="0"/>
        <pt x="255" y="-211" on="1"/>
        <pt x="164" y="-211" on="0"/>
        <pt x="103" y="-152" on="1"/>
        <pt x="57" y="-104" on="0"/>
        <pt x="57" y="-44" on="1"/>
        <pt x="57" y="-11" on="0"/>
        <pt x="96" y="29" on="0"/>
        <pt x="131" y="29" on="1"/>
        <pt x="197" y="21" on="0"/>
        <pt x="197" y="-41" on="1"/>
        <pt x="197" y="-58" on="0"/>
        <pt x="195" y="-66" on="1"/>
        <pt x="183" y="-99" on="0"/>
        <pt x="153" y="-108" on="1"/>
        <pt x="148" y="-110" on="1"/>
        <pt x="150" y="-113" on="1"/>
        <pt x="153" y="-116" on="0"/>
        <pt x="162" y="-124" on="0"/>
        <pt x="166" y="-127" on="1"/>
        <pt x="204" y="-152" on="0"/>
        <pt x="252" y="-152" on="1"/>
        <pt x="274" y="-152" on="0"/>
        <pt x="280" y="-151" on="1"/>
        <pt x="332" y="-138" on="0"/>
        <pt x="348" y="-105" on="1"/>
        <pt x="363" y="-76" on="0"/>
        <pt x="363" y="9" on="1"/>
        <pt x="363" y="105" on="0"/>
        <pt x="351" y="129" on="1"/>
        <pt x="333" y="166" on="0"/>
        <pt x="286" y="166" on="1"/>
        <pt x="201" y="166" on="0"/>
        <pt x="162" y="109" on="1"/>
        <pt x="154" y="98" on="0"/>
        <pt x="145" y="93" on="0"/>
        <pt x="130" y="93" on="1"/>
        <pt x="107" y="93" on="0"/>
        <pt x="102" y="104" on="1"/>
        <pt x="100" y="107" on="0"/>
        <pt x="100" y="279" on="1"/>
        <pt x="100" y="371" on="1"/>
        <pt x="100" y="456" on="0"/>
        <pt x="105" y="458" on="1"/>
        <pt x="106" y="459" on="0"/>
        <pt x="107" y="459" on="1"/>
        <pt x="112" y="462" on="0"/>
        <pt x="131" y="456" on="1"/>
        <pt x="202" y="429" on="0"/>
        <pt x="286" y="429" on="1"/>
        <pt x="365" y="429" on="0"/>
        <pt x="443" y="457" on="1"/>
        <pt x="457" y="461" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 96 values pushed */
          12 1 1 8 14 1 6 2 63 1 7 6 39 1 5 4 4 74 9 1 0 8 0 114 0
          7 6 4 6 7 4 112 0 4 5 6 4 5 110 0 8 0 1 2 8 1 99 0 2 0
          6 7 2 6 99 0 5 3 3 5 87 0 5 5 3 91 0 3 5 3 79 1 0 75 73
          62 60 57 55 47 45 33 32 27 25 19 17 11 9 0 77 1 77 10 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="four" xMin="32" yMin="-194" xMax="542" yMax="469">
      <contour>
        <pt x="217" y="-194" on="1"/>
        <pt x="207" y="-190" on="0"/>
        <pt x="203" y="-182" on="0"/>
        <pt x="203" y="-163" on="1"/>
        <pt x="203" y="-154" on="1"/>
        <pt x="203" y="-140" on="0"/>
        <pt x="212" y="-134" on="1"/>
        <pt x="217" y="-132" on="0"/>
        <pt x="265" y="-132" on="1"/>
        <pt x="314" y="-132" on="1"/>
        <pt x="314" y="0" on="1"/>
        <pt x="180" y="0" on="1"/>
        <pt x="47" y="0" on="0"/>
        <pt x="43" y="2" on="1"/>
        <pt x="37" y="5" on="0"/>
        <pt x="34" y="11" on="1"/>
        <pt x="32" y="14" on="0"/>
        <pt x="32" y="37" on="1"/>
        <pt x="32" y="59" on="0"/>
        <pt x="36" y="67" on="0"/>
        <pt x="373" y="463" on="0"/>
        <pt x="377" y="465" on="1"/>
        <pt x="380" y="468" on="0"/>
        <pt x="383" y="468" on="1"/>
        <pt x="387" y="468" on="1"/>
        <pt x="391" y="468" on="0"/>
        <pt x="405" y="469" on="0"/>
        <pt x="411" y="469" on="1"/>
        <pt x="437" y="469" on="0"/>
        <pt x="440" y="467" on="1"/>
        <pt x="446" y="464" on="0"/>
        <pt x="449" y="459" on="1"/>
        <pt x="451" y="455" on="0"/>
        <pt x="451" y="258" on="1"/>
        <pt x="451" y="62" on="1"/>
        <pt x="489" y="62" on="1"/>
        <pt x="528" y="62" on="0"/>
        <pt x="532" y="60" on="1"/>
        <pt x="542" y="55" on="0"/>
        <pt x="542" y="7" on="0"/>
        <pt x="532" y="2" on="1"/>
        <pt x="528" y="0" on="0"/>
        <pt x="489" y="0" on="1"/>
        <pt x="451" y="0" on="1"/>
        <pt x="451" y="-132" on="1"/>
        <pt x="489" y="-132" on="1"/>
        <pt x="528" y="-132" on="0"/>
        <pt x="531" y="-134" on="1"/>
        <pt x="542" y="-139" on="0"/>
        <pt x="542" y="-163" on="1"/>
        <pt x="542" y="-181" on="0"/>
        <pt x="535" y="-194" on="0"/>
        <pt x="522" y="-194" on="1"/>
        <pt x="504" y="-194" on="0"/>
        <pt x="414" y="-192" on="0"/>
        <pt x="378" y="-192" on="1"/>
        <pt x="281" y="-192" on="0"/>
        <pt x="256" y="-193" on="1"/>
      </contour>
      <contour>
        <pt x="325" y="62" on="1"/>
        <pt x="325" y="320" on="1"/>
        <pt x="179" y="148" on="0"/>
        <pt x="105" y="63" on="1"/>
        <pt x="215" y="62" on="1"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 61 values pushed */
          59 1 4 2 17 1 1 4 2 74 3 1 2 4 2 114 6 1 0 9 1 7 0 7 96
          10 8 2 4 4 1 91 5 1 1 1 16 1 76 58 58 0 0 58 62 58 61 0 57 0
          51 33 52 38 33 58 33 54 11 6 27
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="nine" xMin="48" yMin="-210" xMax="526" yMax="461">
      <contour>
        <pt x="240" y="-210" on="1"/>
        <pt x="166" y="-210" on="0"/>
        <pt x="77" y="-147" on="0"/>
        <pt x="77" y="-82" on="1"/>
        <pt x="77" y="-52" on="0"/>
        <pt x="113" y="-15" on="0"/>
        <pt x="173" y="-15" on="0"/>
        <pt x="209" y="-52" on="0"/>
        <pt x="209" y="-81" on="1"/>
        <pt x="209" y="-118" on="0"/>
        <pt x="175" y="-140" on="1"/>
        <pt x="198" y="-152" on="0"/>
        <pt x="236" y="-152" on="1"/>
        <pt x="294" y="-152" on="0"/>
        <pt x="332" y="-116" on="1"/>
        <pt x="356" y="-91" on="0"/>
        <pt x="376" y="-17" on="0"/>
        <pt x="379" y="62" on="1"/>
        <pt x="379" y="78" on="1"/>
        <pt x="378" y="78" on="0"/>
        <pt x="373" y="71" on="1"/>
        <pt x="347" y="36" on="0"/>
        <pt x="308" y="23" on="1"/>
        <pt x="289" y="17" on="0"/>
        <pt x="262" y="17" on="1"/>
        <pt x="168" y="17" on="0"/>
        <pt x="108" y="77" on="1"/>
        <pt x="76" y="109" on="0"/>
        <pt x="48" y="180" on="0"/>
        <pt x="48" y="235" on="1"/>
        <pt x="48" y="273" on="0"/>
        <pt x="59" y="317" on="1"/>
        <pt x="72" y="356" on="0"/>
        <pt x="137" y="423" on="0"/>
        <pt x="177" y="441" on="1"/>
        <pt x="225" y="461" on="0"/>
        <pt x="276" y="461" on="1"/>
        <pt x="279" y="461" on="0"/>
        <pt x="291" y="460" on="0"/>
        <pt x="295" y="460" on="1"/>
        <pt x="327" y="460" on="0"/>
        <pt x="352" y="454" on="1"/>
        <pt x="429" y="434" on="0"/>
        <pt x="470" y="373" on="1"/>
        <pt x="526" y="286" on="0"/>
        <pt x="526" y="136" on="1"/>
        <pt x="526" y="-101" on="0"/>
        <pt x="365" y="-183" on="1"/>
        <pt x="308" y="-210" on="0"/>
      </contour>
      <contour>
        <pt x="312" y="405" on="1"/>
        <pt x="307" y="406" on="0"/>
        <pt x="283" y="406" on="1"/>
        <pt x="245" y="406" on="0"/>
        <pt x="224" y="387" on="1"/>
        <pt x="208" y="373" on="0"/>
        <pt x="205" y="361" on="1"/>
        <pt x="200" y="351" on="0"/>
        <pt x="197" y="317" on="1"/>
        <pt x="196" y="307" on="0"/>
        <pt x="196" y="233" on="1"/>
        <pt x="196" y="158" on="0"/>
        <pt x="197" y="148" on="1"/>
        <pt x="199" y="110" on="0"/>
        <pt x="225" y="80" on="0"/>
        <pt x="251" y="69" on="0"/>
        <pt x="278" y="69" on="1"/>
        <pt x="298" y="69" on="1"/>
        <pt x="323" y="79" on="0"/>
        <pt x="334" y="90" on="1"/>
        <pt x="366" y="122" on="0"/>
        <pt x="376" y="190" on="1"/>
        <pt x="377" y="200" on="0"/>
        <pt x="377" y="244" on="1"/>
        <pt x="377" y="307" on="0"/>
        <pt x="373" y="334" on="1"/>
        <pt x="370" y="358" on="0"/>
        <pt x="335" y="397" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 11 values pushed */
          61 18 2 6 5 10 1 2 1 2 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          10
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 34 values pushed */
          0 1 3 2 2 1 104 0 4 0 5 6 4 5 99 0 2 7 1 0 2 0 96 0 6
          6 3 91 0 3 3 16 3 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          29
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 35 values pushed */
          0 1 3 2 3 1 2 112 0 4 0 5 6 4 5 99 0 2 7 1 0 2 0 96 0
          6 6 3 91 0 3 3 16 3 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 41 values pushed */
          0 1 3 2 3 1 2 112 0 4 0 5 6 4 5 99 0 6 0 3 1 6 3 99 0
          2 0 0 2 87 0 2 2 0 92 7 1 0 2 0 80
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 21 values pushed */
          1 0 66 64 52 49 40 35 25 23 13 11 6 5 0 48 1 48 8 6 20
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="nonmarkingreturn"/><!-- contains no outline data -->

    <TTGlyph name="one" xMin="80" yMin="0" xMax="494" yMax="461">
      <contour>
        <pt x="80" y="386" on="1"/>
        <pt x="80" y="392" on="0"/>
        <pt x="80" y="399" on="0"/>
        <pt x="81" y="405" on="0"/>
        <pt x="81" y="408" on="0"/>
        <pt x="85" y="412" on="0"/>
        <pt x="86" y="412" on="0"/>
        <pt x="93" y="416" on="0"/>
        <pt x="95" y="417" on="1"/>
        <pt x="119" y="417" on="1"/>
        <pt x="246" y="417" on="0"/>
        <pt x="319" y="455" on="1"/>
        <pt x="331" y="461" on="0"/>
        <pt x="338" y="461" on="1"/>
        <pt x="354" y="461" on="0"/>
        <pt x="358" y="451" on="1"/>
        <pt x="360" y="447" on="0"/>
        <pt x="360" y="254" on="1"/>
        <pt x="360" y="62" on="1"/>
        <pt x="420" y="62" on="1"/>
        <pt x="480" y="62" on="0"/>
        <pt x="484" y="60" on="1"/>
        <pt x="494" y="54" on="0"/>
        <pt x="494" y="35" on="1"/>
        <pt x="494" y="29" on="1"/>
        <pt x="494" y="12" on="0"/>
        <pt x="487" y="0" on="0"/>
        <pt x="473" y="0" on="1"/>
        <pt x="451" y="0" on="0"/>
        <pt x="338" y="2" on="0"/>
        <pt x="252" y="2" on="0"/>
        <pt x="140" y="0" on="0"/>
        <pt x="117" y="0" on="1"/>
        <pt x="103" y="0" on="0"/>
        <pt x="96" y="12" on="0"/>
        <pt x="96" y="29" on="1"/>
        <pt x="96" y="35" on="1"/>
        <pt x="96" y="56" on="0"/>
        <pt x="107" y="60" on="1"/>
        <pt x="110" y="62" on="0"/>
        <pt x="170" y="62" on="1"/>
        <pt x="229" y="62" on="1"/>
        <pt x="229" y="213" on="1"/>
        <pt x="229" y="363" on="0"/>
        <pt x="228" y="363" on="1"/>
        <pt x="218" y="360" on="0"/>
        <pt x="181" y="357" on="1"/>
        <pt x="178" y="357" on="0"/>
        <pt x="162" y="356" on="0"/>
        <pt x="138" y="355" on="0"/>
        <pt x="130" y="355" on="1"/>
        <pt x="93" y="355" on="1"/>
        <pt x="83" y="359" on="0"/>
        <pt x="80" y="368" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 40 values pushed */
          15 1 0 1 1 74 0 1 0 1 114 0 0 0 5 2 0 5 97 4 1 2 2 3 92
          0 3 3 16 3 76 85 53 118 36 34 55 6 6 26
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="seven" xMin="64" yMin="-211" xMax="558" yMax="476">
      <contour>
        <pt x="162" y="458" on="1"/>
        <pt x="162" y="451" on="0"/>
        <pt x="213" y="448" on="1"/>
        <pt x="221" y="448" on="0"/>
        <pt x="255" y="446" on="0"/>
        <pt x="260" y="446" on="1"/>
        <pt x="261" y="446" on="0"/>
        <pt x="410" y="444" on="1"/>
        <pt x="543" y="444" on="0"/>
        <pt x="545" y="443" on="1"/>
        <pt x="558" y="441" on="0"/>
        <pt x="558" y="413" on="1"/>
        <pt x="558" y="395" on="0"/>
        <pt x="556" y="393" on="1"/>
        <pt x="554" y="389" on="0"/>
        <pt x="473" y="296" on="1"/>
        <pt x="392" y="202" on="1"/>
        <pt x="336" y="127" on="0"/>
        <pt x="326" y="-3" on="1"/>
        <pt x="322" y="-43" on="0"/>
        <pt x="321" y="-104" on="1"/>
        <pt x="321" y="-154" on="0"/>
        <pt x="319" y="-162" on="1"/>
        <pt x="314" y="-182" on="0"/>
        <pt x="278" y="-211" on="0"/>
        <pt x="255" y="-211" on="1"/>
        <pt x="231" y="-211" on="0"/>
        <pt x="195" y="-182" on="0"/>
        <pt x="190" y="-160" on="1"/>
        <pt x="189" y="-153" on="0"/>
        <pt x="189" y="-130" on="1"/>
        <pt x="194" y="17" on="0"/>
        <pt x="282" y="156" on="1"/>
        <pt x="309" y="200" on="0"/>
        <pt x="370" y="270" on="1"/>
        <pt x="404" y="307" on="0"/>
        <pt x="400" y="307" on="1"/>
        <pt x="293" y="307" on="1"/>
        <pt x="151" y="306" on="0"/>
        <pt x="146" y="303" on="1"/>
        <pt x="138" y="299" on="0"/>
        <pt x="129" y="242" on="1"/>
        <pt x="124" y="218" on="0"/>
        <pt x="120" y="215" on="1"/>
        <pt x="115" y="210" on="0"/>
        <pt x="95" y="210" on="1"/>
        <pt x="78" y="210" on="0"/>
        <pt x="74" y="212" on="1"/>
        <pt x="65" y="217" on="0"/>
        <pt x="64" y="225" on="1"/>
        <pt x="64" y="229" on="0"/>
        <pt x="100" y="461" on="0"/>
        <pt x="102" y="465" on="1"/>
        <pt x="105" y="473" on="0"/>
        <pt x="115" y="476" on="0"/>
        <pt x="131" y="476" on="1"/>
        <pt x="152" y="476" on="0"/>
        <pt x="157" y="470" on="1"/>
        <pt x="162" y="467" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 55 values pushed */
          49 1 3 2 28 1 1 3 2 74 0 4 0 4 114 0 3 2 1 2 3 1 112 0 1
          1 113 0 0 2 2 0 87 0 0 0 2 91 0 2 0 2 79 56 54 46 44 38 35 26
          24 98 5 6 21
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="six" xMin="48" yMin="-17" xMax="526" yMax="660">
      <contour>
        <pt x="405" y="593" on="1"/>
        <pt x="385" y="603" on="0"/>
        <pt x="381" y="603" on="1"/>
        <pt x="361" y="607" on="0"/>
        <pt x="350" y="607" on="1"/>
        <pt x="306" y="607" on="0"/>
        <pt x="238" y="565" on="0"/>
        <pt x="221" y="533" on="1"/>
        <pt x="199" y="489" on="0"/>
        <pt x="196" y="385" on="1"/>
        <pt x="195" y="370" on="1"/>
        <pt x="197" y="372" on="1"/>
        <pt x="220" y="402" on="0"/>
        <pt x="271" y="431" on="0"/>
        <pt x="313" y="431" on="1"/>
        <pt x="409" y="431" on="0"/>
        <pt x="468" y="368" on="1"/>
        <pt x="526" y="310" on="0"/>
        <pt x="526" y="208" on="1"/>
        <pt x="526" y="131" on="0"/>
        <pt x="458" y="31" on="0"/>
        <pt x="405" y="5" on="1"/>
        <pt x="359" y="-17" on="0"/>
        <pt x="289" y="-17" on="1"/>
        <pt x="217" y="-17" on="0"/>
        <pt x="161" y="19" on="1"/>
        <pt x="48" y="94" on="0"/>
        <pt x="48" y="316" on="1"/>
        <pt x="48" y="458" on="0"/>
        <pt x="113" y="546" on="1"/>
        <pt x="185" y="648" on="0"/>
        <pt x="322" y="660" on="1"/>
        <pt x="339" y="660" on="1"/>
        <pt x="377" y="660" on="0"/>
        <pt x="384" y="659" on="1"/>
        <pt x="497" y="633" on="0"/>
        <pt x="497" y="532" on="1"/>
        <pt x="497" y="502" on="0"/>
        <pt x="461" y="466" on="0"/>
        <pt x="401" y="466" on="0"/>
        <pt x="365" y="503" on="0"/>
        <pt x="365" y="530" on="1"/>
        <pt x="365" y="569" on="0"/>
      </contour>
      <contour>
        <pt x="357" y="359" on="1"/>
        <pt x="336" y="378" on="0"/>
        <pt x="299" y="380" on="1"/>
        <pt x="275" y="380" on="0"/>
        <pt x="253" y="371" on="0"/>
        <pt x="240" y="358" on="1"/>
        <pt x="196" y="314" on="0"/>
        <pt x="196" y="212" on="1"/>
        <pt x="196" y="146" on="0"/>
        <pt x="202" y="110" on="1"/>
        <pt x="206" y="92" on="0"/>
        <pt x="216" y="80" on="1"/>
        <pt x="240" y="41" on="0"/>
        <pt x="292" y="41" on="1"/>
        <pt x="295" y="41" on="0"/>
        <pt x="307" y="42" on="0"/>
        <pt x="309" y="42" on="1"/>
        <pt x="338" y="46" on="0"/>
        <pt x="355" y="62" on="1"/>
        <pt x="368" y="76" on="0"/>
        <pt x="372" y="90" on="1"/>
        <pt x="379" y="115" on="0"/>
        <pt x="379" y="230" on="1"/>
        <pt x="378" y="304" on="0"/>
        <pt x="371" y="344" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 51 values pushed */
          10 1 6 5 1 74 0 4 0 1 0 4 1 112 0 3 0 0 4 3 0 99 0 1 0
          5 6 1 5 99 0 6 6 2 91 0 2 2 14 2 76 57 37 21 39 39 40 35 7 6
          27
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="space"/><!-- contains no outline data -->

    <TTGlyph name="three" xMin="48" yMin="-211" xMax="525" yMax="461">
      <contour>
        <pt x="177" y="377" on="1"/>
        <pt x="226" y="358" on="0"/>
        <pt x="226" y="310" on="1"/>
        <pt x="226" y="275" on="0"/>
        <pt x="187" y="235" on="0"/>
        <pt x="119" y="235" on="0"/>
        <pt x="80" y="275" on="0"/>
        <pt x="80" y="309" on="1"/>
        <pt x="80" y="326" on="0"/>
        <pt x="84" y="341" on="1"/>
        <pt x="98" y="394" on="0"/>
        <pt x="202" y="461" on="0"/>
        <pt x="276" y="461" on="1"/>
        <pt x="353" y="461" on="0"/>
        <pt x="460" y="412" on="0"/>
        <pt x="482" y="367" on="1"/>
        <pt x="494" y="342" on="0"/>
        <pt x="494" y="313" on="1"/>
        <pt x="494" y="264" on="0"/>
        <pt x="462" y="222" on="1"/>
        <pt x="432" y="181" on="0"/>
        <pt x="373" y="155" on="1"/>
        <pt x="361" y="151" on="1"/>
        <pt x="376" y="147" on="1"/>
        <pt x="461" y="126" on="0"/>
        <pt x="501" y="66" on="1"/>
        <pt x="525" y="32" on="0"/>
        <pt x="525" y="-15" on="1"/>
        <pt x="525" y="-83" on="0"/>
        <pt x="481" y="-134" on="1"/>
        <pt x="449" y="-170" on="0"/>
        <pt x="339" y="-211" on="0"/>
        <pt x="274" y="-211" on="1"/>
        <pt x="189" y="-211" on="0"/>
        <pt x="60" y="-136" on="0"/>
        <pt x="49" y="-70" on="1"/>
        <pt x="48" y="-64" on="0"/>
        <pt x="48" y="-53" on="1"/>
        <pt x="48" y="-17" on="0"/>
        <pt x="90" y="29" on="0"/>
        <pt x="128" y="29" on="1"/>
        <pt x="164" y="29" on="0"/>
        <pt x="208" y="-16" on="0"/>
        <pt x="208" y="-50" on="1"/>
        <pt x="208" y="-92" on="0"/>
        <pt x="179" y="-113" on="1"/>
        <pt x="167" y="-121" on="1"/>
        <pt x="160" y="-125" on="0"/>
        <pt x="164" y="-127" on="1"/>
        <pt x="167" y="-129" on="0"/>
        <pt x="176" y="-133" on="1"/>
        <pt x="215" y="-152" on="0"/>
        <pt x="268" y="-152" on="1"/>
        <pt x="337" y="-152" on="0"/>
        <pt x="356" y="-92" on="1"/>
        <pt x="364" y="-69" on="0"/>
        <pt x="364" y="-14" on="1"/>
        <pt x="364" y="61" on="0"/>
        <pt x="341" y="92" on="1"/>
        <pt x="328" y="109" on="0"/>
        <pt x="303" y="120" on="1"/>
        <pt x="287" y="125" on="0"/>
        <pt x="240" y="125" on="1"/>
        <pt x="202" y="125" on="0"/>
        <pt x="198" y="127" on="1"/>
        <pt x="191" y="132" on="0"/>
        <pt x="191" y="152" on="1"/>
        <pt x="192" y="170" on="0"/>
        <pt x="201" y="176" on="0"/>
        <pt x="233" y="178" on="1"/>
        <pt x="267" y="180" on="0"/>
        <pt x="279" y="185" on="1"/>
        <pt x="320" y="201" on="0"/>
        <pt x="337" y="257" on="1"/>
        <pt x="345" y="280" on="0"/>
        <pt x="345" y="320" on="1"/>
        <pt x="345" y="367" on="0"/>
        <pt x="312" y="407" on="0"/>
        <pt x="270" y="407" on="1"/>
        <pt x="225" y="407" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 75 values pushed */
          22 1 5 6 35 1 4 3 2 74 0 0 7 6 7 0 6 112 0 3 5 4 5 3 4
          112 0 1 0 7 0 1 7 99 0 6 0 5 3 6 5 99 0 4 2 2 4 87 0 4
          4 2 91 0 2 4 2 79 79 77 70 68 63 61 53 51 41 39 33 31 38 20 8 6 22
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="two" xMin="51" yMin="0" xMax="517" yMax="460">
      <contour>
        <pt x="149" y="296" on="0"/>
        <pt x="97" y="296" on="0"/>
        <pt x="64" y="330" on="0"/>
        <pt x="64" y="356" on="1"/>
        <pt x="64" y="384" on="0"/>
        <pt x="78" y="403" on="1"/>
        <pt x="117" y="460" on="0"/>
        <pt x="253" y="460" on="1"/>
        <pt x="313" y="460" on="0"/>
        <pt x="325" y="459" on="1"/>
        <pt x="429" y="447" on="0"/>
        <pt x="477" y="401" on="1"/>
        <pt x="516" y="365" on="0"/>
        <pt x="516" y="310" on="1"/>
        <pt x="516" y="279" on="0"/>
        <pt x="495" y="244" on="0"/>
        <pt x="470" y="227" on="1"/>
        <pt x="446" y="211" on="0"/>
        <pt x="392" y="191" on="1"/>
        <pt x="357" y="177" on="0"/>
        <pt x="354" y="176" on="1"/>
        <pt x="350" y="174" on="0"/>
        <pt x="300" y="150" on="0"/>
        <pt x="277" y="139" on="1"/>
        <pt x="254" y="128" on="1"/>
        <pt x="414" y="129" on="0"/>
        <pt x="428" y="130" on="1"/>
        <pt x="439" y="130" on="1"/>
        <pt x="447" y="144" on="0"/>
        <pt x="454" y="169" on="1"/>
        <pt x="457" y="186" on="0"/>
        <pt x="467" y="193" on="0"/>
        <pt x="486" y="193" on="1"/>
        <pt x="503" y="193" on="0"/>
        <pt x="507" y="191" on="1"/>
        <pt x="516" y="186" on="0"/>
        <pt x="517" y="178" on="1"/>
        <pt x="517" y="171" on="0"/>
        <pt x="486" y="16" on="0"/>
        <pt x="484" y="11" on="1"/>
        <pt x="482" y="5" on="0"/>
        <pt x="476" y="2" on="1"/>
        <pt x="472" y="0" on="0"/>
        <pt x="269" y="0" on="1"/>
        <pt x="65" y="0" on="0"/>
        <pt x="62" y="2" on="1"/>
        <pt x="55" y="5" on="0"/>
        <pt x="51" y="15" on="0"/>
        <pt x="51" y="32" on="1"/>
        <pt x="51" y="54" on="0"/>
        <pt x="56" y="58" on="1"/>
        <pt x="60" y="62" on="0"/>
        <pt x="173" y="131" on="1"/>
        <pt x="273" y="192" on="0"/>
        <pt x="320" y="224" on="0"/>
        <pt x="335" y="239" on="1"/>
        <pt x="368" y="272" on="0"/>
        <pt x="368" y="308" on="1"/>
        <pt x="368" y="368" on="0"/>
        <pt x="288" y="390" on="1"/>
        <pt x="256" y="399" on="0"/>
        <pt x="214" y="399" on="1"/>
        <pt x="170" y="399" on="0"/>
        <pt x="170" y="392" on="1"/>
        <pt x="171" y="390" on="0"/>
        <pt x="173" y="388" on="1"/>
        <pt x="182" y="375" on="0"/>
        <pt x="182" y="355" on="1"/>
        <pt x="182" y="329" on="0"/>
      </contour>
      <instructions><assembly>
          PUSHB[ ]	/* 6 values pushed */
          36 1 2 4 1 74
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          13
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 33 values pushed */
          0 0 6 4 6 0 104 0 4 2 2 4 102 0 1 0 6 0 1 6 99 3 1 2 2
          5 92 0 5 5 16 5 76
          ELSE[ ]	/* Else */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          20
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
          NPUSHB[ ]	/* 34 values pushed */
          0 0 6 4 6 0 4 112 0 4 2 2 4 102 0 1 0 6 0 1 6 99 3 1 2
          2 5 92 0 5 5 16 5 76
          ELSE[ ]	/* Else */
          NPUSHB[ ]	/* 35 values pushed */
          0 0 6 4 6 0 4 112 0 4 2 6 4 2 110 0 1 0 6 0 1 6 99 3 1
          2 2 5 92 0 5 5 16 5 76
          EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
          NPUSHB[ ]	/* 15 values pushed */
          62 60 44 41 33 31 27 26 25 24 37 16 7 6 22
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="uni00A0"/><!-- contains no outline data -->

    <TTGlyph name="uniEFFD" xMin="0" yMin="0" xMax="500" yMax="100">
      <contour>
        <pt x="0" y="0" on="1"/>
        <pt x="0" y="100" on="1"/>
        <pt x="100" y="100" on="1"/>
        <pt x="100" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="400" y="0" on="1"/>
        <pt x="400" y="100" on="1"/>
        <pt x="500" y="100" on="1"/>
        <pt x="500" y="0" on="1"/>
      </contour>
      <instructions><assembly>
          PUSHB[ ]	/* 6 values pushed */
          5 4 1 0 2 48
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="uniEFFE" xMin="0" yMin="0" xMax="300" yMax="100">
      <contour>
        <pt x="0" y="0" on="1"/>
        <pt x="0" y="100" on="1"/>
        <pt x="100" y="100" on="1"/>
        <pt x="100" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="200" y="0" on="1"/>
        <pt x="200" y="100" on="1"/>
        <pt x="300" y="100" on="1"/>
        <pt x="300" y="0" on="1"/>
      </contour>
      <instructions><assembly>
          PUSHB[ ]	/* 6 values pushed */
          5 4 1 0 2 48
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="uniEFFF" xMin="0" yMin="0" xMax="100" yMax="100">
      <contour>
        <pt x="0" y="0" on="1"/>
        <pt x="0" y="100" on="1"/>
        <pt x="100" y="100" on="1"/>
        <pt x="100" y="0" on="1"/>
      </contour>
      <instructions><assembly>
          PUSHB[ ]	/* 4 values pushed */
          1 0 1 48
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

    <TTGlyph name="zero" xMin="46" yMin="-17" xMax="528" yMax="460">
      <contour>
        <pt x="412" y="-17" on="0"/>
        <pt x="162" y="-17" on="0"/>
        <pt x="46" y="95" on="0"/>
        <pt x="46" y="219" on="1"/>
        <pt x="46" y="323" on="0"/>
        <pt x="125" y="438" on="0"/>
        <pt x="210" y="454" on="1"/>
        <pt x="234" y="460" on="0"/>
        <pt x="259" y="460" on="1"/>
        <pt x="279" y="460" on="1"/>
        <pt x="328" y="460" on="0"/>
        <pt x="337" y="459" on="1"/>
        <pt x="443" y="445" on="0"/>
        <pt x="491" y="378" on="1"/>
        <pt x="528" y="321" on="0"/>
        <pt x="528" y="219" on="1"/>
        <pt x="528" y="95" on="0"/>
      </contour>
      <contour>
        <pt x="366" y="385" on="1"/>
        <pt x="339" y="409" on="0"/>
        <pt x="280" y="409" on="1"/>
        <pt x="232" y="409" on="0"/>
        <pt x="208" y="385" on="1"/>
        <pt x="196" y="374" on="0"/>
        <pt x="187" y="341" on="0"/>
        <pt x="186" y="297" on="1"/>
        <pt x="186" y="293" on="0"/>
        <pt x="185" y="246" on="0"/>
        <pt x="185" y="229" on="1"/>
        <pt x="185" y="157" on="0"/>
        <pt x="187" y="131" on="1"/>
        <pt x="189" y="97" on="0"/>
        <pt x="194" y="83" on="1"/>
        <pt x="208" y="35" on="0"/>
        <pt x="366" y="35" on="0"/>
        <pt x="380" y="83" on="1"/>
        <pt x="385" y="97" on="0"/>
        <pt x="387" y="131" on="1"/>
        <pt x="389" y="157" on="0"/>
        <pt x="389" y="229" on="1"/>
        <pt x="389" y="246" on="0"/>
        <pt x="388" y="293" on="0"/>
        <pt x="388" y="297" on="1"/>
        <pt x="387" y="341" on="0"/>
        <pt x="378" y="374" on="0"/>
      </contour>
      <instructions><assembly>
          NPUSHB[ ]	/* 33 values pushed */
          36 29 2 3 2 1 74 0 1 0 2 3 1 2 99 0 3 3 0 91 0 0 0 14 0
          76 28 40 54 16 4 6 24
          CALL[ ]	/* CallFunction */
        </assembly></instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="0" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Copyright (c) 2009-2010 Design Science, Inc.
Copyright (c) 2014 Khan Academy
    </namerecord>
    <namerecord nameID="1" platformID="1" platEncID="0" langID="0x0" unicode="True">
      KaTeX_Caligraphic
    </namerecord>
    <namerecord nameID="2" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Bold
    </namerecord>
    <namerecord nameID="3" platformID="1" platEncID="0" langID="0x0" unicode="True">
      FontForge 2.0 : KaTeX_Caligraphic-Bold
    </namerecord>
    <namerecord nameID="4" platformID="1" platEncID="0" langID="0x0" unicode="True">
      KaTeX_Caligraphic-Bold
    </namerecord>
    <namerecord nameID="5" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Version 1.1; ttfautohint (v1.3)
    </namerecord>
    <namerecord nameID="6" platformID="1" platEncID="0" langID="0x0" unicode="True">
      KaTeX_Caligraphic-Bold
    </namerecord>
    <namerecord nameID="13" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Copyright (c) 2009-2010, Design Science, Inc. (&lt;www.mathjax.org&gt;)
Copyright (c) 2014 Khan Academy (&lt;www.khanacademy.org&gt;),
with Reserved Font Name KaTeX_Caligraphic.

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license available with a FAQ at:
http://scripts.sil.org/OFL
    </namerecord>
    <namerecord nameID="14" platformID="1" platEncID="0" langID="0x0" unicode="True">
      http://scripts.sil.org/OFL
    </namerecord>
    <namerecord nameID="16" platformID="1" platEncID="0" langID="0x0" unicode="True">
      KaTeX_Caligraphic
    </namerecord>
    <namerecord nameID="17" platformID="1" platEncID="0" langID="0x0" unicode="True">
      Bold
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      Copyright (c) 2009-2010 Design Science, Inc.
Copyright (c) 2014 Khan Academy
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      KaTeX_Caligraphic
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Bold
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      FontForge 2.0 : KaTeX_Caligraphic-Bold
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      KaTeX_Caligraphic-Bold
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 1.1; ttfautohint (v1.3)
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      KaTeX_Caligraphic-Bold
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x409">
      Copyright (c) 2009-2010, Design Science, Inc. (&lt;www.mathjax.org&gt;)
Copyright (c) 2014 Khan Academy (&lt;www.khanacademy.org&gt;),
with Reserved Font Name KaTeX_Caligraphic.

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license available with a FAQ at:
http://scripts.sil.org/OFL
    </namerecord>
    <namerecord nameID="14" platformID="3" platEncID="1" langID="0x409">
      http://scripts.sil.org/OFL
    </namerecord>
    <namerecord nameID="16" platformID="3" platEncID="1" langID="0x409">
      KaTeX_Caligraphic
    </namerecord>
    <namerecord nameID="17" platformID="3" platEncID="1" langID="0x409">
      Bold
    </namerecord>
  </name>

  <post>
    <formatType value="2.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-125"/>
    <underlineThickness value="50"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
    <psNames>
      <!-- This file uses unique glyph names based on the information
           found in the 'post' table. Since these names might not be unique,
           we have to invent artificial names in case of clashes. In order to
           be able to retain the original information, we need a name to
           ps name mapping for those cases where they differ. That's what
           you see below.
            -->
    </psNames>
    <extraNames>
      <!-- following are the name that are not taken from the standard Mac glyph order -->
      <psName name="uni00A0"/>
      <psName name="uniEFFD"/>
      <psName name="uniEFFE"/>
      <psName name="uniEFFF"/>
    </extraNames>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="15"/>
  </gasp>

  <FFTM>
    <!-- FontForge's timestamp, font source creation and modification dates -->
    <version value="1"/>
    <FFTimeStamp value="Tue Jul 31 14:57:19 2012"/>
    <sourceCreated value="Mon Oct 12 19:21:51 2009"/>
    <sourceModified value="Mon Jun 29 22:52:03 2015"/>
  </FFTM>

</ttFont>
